# Instead of using artifacts, just build in an NFS-mounted directory,
# $BUILD_DIR, that's unique to each pipeline in case there are concurrent
# pipelines.  Why not use artifacts?
#
# - [The following numbers are a bit old, and they were recorded for a debug
#   build.]
# - LLVM's build directory is huge.  For me, it's 46G when including just
#   the clang and openmp subprojects, which are required for Clacc, and it's
#   85G when including nearly all subprojects.
# - At this size, it takes a long time to upload/download between stages and
#   can be rejected as an upload because of its size.  For me, it added 20
#   min to the already 30 min build of that 46G and then was rejected.
# - Artifacts are posted for download and stored long past when it's useful
#   for humans to download the LLVM build directory, which is typically
#   never.
# - We could squash the pipeline to one stage to avoid the need for
#   artifacts, but pipeline stages are a convenient way to view results when
#   debugging.
#
# The NFS solution used here is based on the following comment (which is in
# response to a proposal for a gitlab feature that would solve this
# problem):
#
#   https://gitlab.com/gitlab-org/gitlab/issues/29265#note_225288132
#
# However, because the NFS-mounted build directory name is different for each
# pipeline, ccache misses if we compile within it.  Thus, we set
# CCACHE_NOHASHDIR and CCACHE_BASEDIR (neither alone proves sufficient), as
# suggested by the ccache manual.  CCACHE_NOHASHDIR can lead to incorrect
# directory names in debugging symbols, but currently we don't expect those to
# matter to our CI builds.
variables:
  BUILD_DIR_PROJ: $CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds
  BUILD_DIR: $CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds/$CI_PIPELINE_ID-$BUILD_ID
  BUILD_DIRS: $CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds/$CI_PIPELINE_ID-*
  LLVM_CCACHE_PARAMS: 'CCACHE_CPP2=yes CCACHE_NOHASHDIR=yes CCACHE_BASEDIR=$CI_BUILDS_DIR/$CI_PROJECT_PATH_SLUG-builds'
  LLVM_TARGETS_TO_BUILD: all
  # check-all is supposed to include check-openmp.  However, D121276 broke that
  # upstream.  D121647 was supposed to fix it but what landed didn't fix it.
  # Until it gets fixed, work around it by running both.
  CHECK_TARGETS: check-all check-openmp
  # The number of tests launched at once is `nproc` / $LIT_NPROC_DIVISOR.
  LIT_NPROC_DIVISOR: 1
  # Sometimes a build process gets stuck for a long time, and sometimes a test
  # process does (usually OpenMP tests).  One hour of CPU time should be plenty
  # for any process.  The goal is simply not to let them stick around forever.
  ULIMIT_T: 3600
  # Which commits to use for OpenACC V&V testing.
  VV_LLVM_TEST_SUITE_COMMIT: da5c250df731c259bd6f15f05ab93f3f7b902b63
  VV_COMMIT: 5ba1bbcdebc63237e650fa2fbf7a5e0781f6d724
  KOKKOS_COMMIT: 43a105744fa67a3810fe7fbc29315a9e349047a1
  KOKKOS_TESTS_COMMIT: a883ce8d4806b9ad1a1696ccb1e83f8a043f5be5
  KOKKOS_CMAKE_OPTS:

stages:
  - setup
  - config
  - build
  - test
  - vv
  - kokkos
  - cleanup
  - manual cleanup

#-------------------------------------------------------------------------------
# build configurations
#
# Test every architecture with a release build plus assertions using python3.
# There are multiple milan* systems, so use them to check configuration
# choices that are hopefully orthogonal to the architecture.
#-------------------------------------------------------------------------------

.leconte:
  tags: [shell, leconte]
  variables:
    BUILD_ID: leconte
    MODULES: git cmake/3.19.2 gnu/9.2.0 nvhpc/22.11
    PATH_PREPEND:
      /opt/nvidia/hpc_sdk/Linux_ppc64le/22.11/cuda/11.8/bin
    CMAKE: cmake
    NINJA: ninja
    PYTHON: /usr/bin/python3
    CMAKE_BUILD_OPTS: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=True
    LLVM_ENABLE_PROJECTS: "clang"
    LLVM_ENABLE_RUNTIMES: "openmp"
    CPU_TRIPLE: "powerpc64le-ibm-linux-gnu"
    CPU_COUNT:  4
    GPU_TRIPLE: "nvptx64-nvidia-cuda"
    GPU_COUNT:  6
    KOKKOS_CMAKE_OPTS: -DKokkos_ARCH_VOLTA70=On
    LIT_NPROC_DIVISOR: 4
    LIT_XFAIL:
      "
      libomp :: atomic/kmp_atomic_float10_max_min.c
      libomp :: env/kmp_set_dispatch_buf.c
      libomp :: worksharing/for/kmp_set_dispatch_buf.c
      libomptarget :: nvptx64-nvidia-cuda :: offloading/bug49334.cpp
      libomptarget :: nvptx64-nvidia-cuda-oldDriver :: offloading/bug49334.cpp
      libomptarget :: powerpc64le-ibm-linux-gnu :: offloading/bug49334.cpp
      libomptarget :: powerpc64le-ibm-linux-gnu-oldDriver :: offloading/bug49334.cpp
      "
    LIT_XFAIL_NOT:
      "
      libomptarget :: nvptx64-nvidia-cuda :: unified_shared_memory/api.c
      libomptarget :: nvptx64-nvidia-cuda-oldDriver :: unified_shared_memory/api.c
      "
    VV_COMP_LIT_XFAIL:
      ""
    VV_RUN_LIT_XFAIL:
      "
      External/openacc_vv/acc_map_data.c.test
      External/openacc_vv/acc_unmap_data.c.test
      "

.oswald02:
  tags: [shell, oswald02]
  variables:
    BUILD_ID: oswald02
    MODULES: git cmake gnu/11.1.0 nvhpc/22.7
    PATH_PREPEND:
      /opt/nvidia/hpc_sdk/Linux_x86_64/22.7/cuda/11.7/bin
    CMAKE: cmake
    NINJA: ninja
    PYTHON: /usr/bin/python3
    CMAKE_BUILD_OPTS: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=True
    LLVM_ENABLE_PROJECTS: "clang"
    LLVM_ENABLE_RUNTIMES: "openmp"
    CPU_TRIPLE: "x86_64-pc-linux-gnu"
    CPU_COUNT:  4
    GPU_TRIPLE: "nvptx64-nvidia-cuda"
    GPU_COUNT:  1
    KOKKOS_CMAKE_OPTS: -DKokkos_ARCH_PASCAL60=On
    LIT_NPROC_DIVISOR: 1
    LIT_XFAIL:
      "
      libomptarget :: nvptx64-nvidia-cuda :: offloading/bug49334.cpp
      libomptarget :: nvptx64-nvidia-cuda-oldDriver :: offloading/bug49334.cpp
      "
    LIT_XFAIL_NOT:
      ""
    VV_COMP_LIT_XFAIL:
      ""
    VV_RUN_LIT_XFAIL:
      "
      External/openacc_vv/acc_map_data.c.test
      External/openacc_vv/acc_unmap_data.c.test
      "

.explorer:
  tags: [shell, explorer]
  variables:
    BUILD_ID: explorer
    MODULES: git
    PATH_PREPEND: ""
    CMAKE: cmake
    GCC_DIR: /usr
    NINJA: ninja
    PYTHON: /usr/bin/python3
    CMAKE_BUILD_OPTS: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=True
    # If lld isn't built, OpenMP offloading tests for AMDGPU fail:
    #
    #   clang-14: error: unable to execute command: Executable "lld" doesn't exist!
#   #   clang-14: error: amdgcn-link command failed with exit code 1 (use -v to see invocation)
    LLVM_ENABLE_PROJECTS: "clang;lld"
    LLVM_ENABLE_RUNTIMES: "openmp"
    CPU_TRIPLE: "x86_64-pc-linux-gnu"
    CPU_COUNT:  4
    GPU_TRIPLE: "amdgcn-amd-amdhsa"
    GPU_COUNT:  2
    KOKKOS_CMAKE_OPTS: -DKokkos_ARCH_VEGA906=On
    LIT_NPROC_DIVISOR: 1
    LIT_XFAIL:
      "
      Clang :: Driver/rocm-detect.hip
      Clang :: OpenACC/directives/amdgcn-amd-amdhsa/parallel-da.c
      libomptarget :: amdgcn-amd-amdhsa-oldDriver :: offloading/cuda_no_devices.c
      "
    LIT_XFAIL_NOT:
      ""
    VV_COMP_LIT_XFAIL:
      ""
    VV_RUN_LIT_XFAIL:
      "
      External/openacc_vv/acc_map_data.c.test
      External/openacc_vv/acc_unmap_data.c.test
      External/openacc_vv/atomic_capture_expr_plus_x.c.test
      "

.milan:
  tags: [shell, milan]
  variables:
    BUILD_ID: milan
    MODULES: gnu/12.2.0
    PATH_PREPEND: ""
    CMAKE: cmake
    NINJA: ninja
    PYTHON: /usr/bin/python3
    CMAKE_BUILD_OPTS: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=True
    LLVM_ENABLE_PROJECTS: "clang"
    LLVM_ENABLE_RUNTIMES: "openmp"
    CPU_TRIPLE: "x86_64-pc-linux-gnu"
    CPU_COUNT: 4
    LIT_XFAIL:
      ""
    LIT_XFAIL_NOT:
      ""
    VV_COMP_LIT_XFAIL:
      ""
    VV_RUN_LIT_XFAIL:
      "
      External/openacc_vv/acc_map_data.c.test
      External/openacc_vv/acc_unmap_data.c.test
      "

.no-asserts:
  extends: [.milan]
  variables:
    BUILD_ID: no-asserts
    CMAKE_BUILD_OPTS: -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=False
    LIT_XFAIL:
      "
      Clang :: Headers/wasm.c
      LLVM :: Analysis/CostModel/X86/interleaved-store-accesses-with-gaps.ll
      "
    LIT_XFAIL_NOT:
      ""
    VV_COMP_LIT_XFAIL:
      ""
    VV_RUN_LIT_XFAIL:
      "
      External/openacc_vv/acc_map_data.c.test
      External/openacc_vv/acc_unmap_data.c.test
      "

.debug:
  extends: [.milan]
  variables:
    BUILD_ID: debug
    CMAKE_BUILD_OPTS: -DCMAKE_BUILD_TYPE=Debug
    LIT_XFAIL:
      "
      libomptarget :: x86_64-pc-linux-gnu :: offloading/bug49334.cpp
      libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp
      libomptarget :: x86_64-pc-linux-gnu :: offloading/parallel_offloading_map.cpp
      libomptarget :: x86_64-pc-linux-gnu :: unified_shared_memory/close_modifier.c
      libomptarget :: x86_64-pc-linux-gnu-oldDriver :: unified_shared_memory/close_modifier.c
      "
    LIT_XFAIL_NOT:
      ""
    VV_COMP_LIT_XFAIL:
      ""
    VV_RUN_LIT_XFAIL:
      "
      External/openacc_vv/acc_map_data.c.test
      External/openacc_vv/acc_unmap_data.c.test
      "

# Not setup or cleanup.
.non-utility:
  dependencies: []
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:prepare_for_job[collapsed=true]\r\e[0KPrepare for job"
    - echo $MODULES
    - if test x"$MODULES" != x; then module load $MODULES; fi
    - echo $PATH_PREPEND
    - if test x"$PATH_PREPEND" != x; then PATH="$PATH_PREPEND:$PATH"; fi
    - echo $PATH
    - pwd
    - echo $BUILD_DIR
    - cd $BUILD_DIR/build
    - ulimit -t $ULIMIT_T
    - echo -e "\e[0Ksection_end:`date +%s`:prepare_for_job\r\e[0K"
  after_script:
    - echo -e "\e[0Ksection_start:`date +%s`:show_stats[collapsed=true]\r\e[0KShow ccache and build statistics"
    - echo "$LLVM_CCACHE_PARAMS"
    - env $LLVM_CCACHE_PARAMS ccache -sp
    - du -hs $BUILD_DIR/build
    - if test -e $BUILD_DIR/install; then du -hs $BUILD_DIR/install; fi
    - echo -e "\e[0Ksection_end:`date +%s`:show_stats\r\e[0K"

#-------------------------------------------------------------------------------
# setup
#-------------------------------------------------------------------------------

.setup:
  stage: setup
  script:
    - pwd
    - echo $BUILD_DIR_PROJ
    # Try to remove anything older than 6 hours that was left by a previous
    # pipeline for this project.  Doing this in the setup stage instead of
    # cleanup stage ensures that it runs before a new job even if prior jobs
    # failed or were canceled.  git clone creates files with old modification
    # times, so check file creation time (-cmin) instead.
    - find $BUILD_DIR_PROJ -cmin +360 -delete || true
    - mkdir -p $BUILD_DIR_PROJ
    - echo $BUILD_DIR
    # Remove this build config's build directory if it already exists.  It
    # might exist if, for example, this setup job previously failed due to a
    # transient Gitlab/ExCL problem.
    - rm -rf $BUILD_DIR
    - mkdir $BUILD_DIR
    - mkdir $BUILD_DIR/build
    # Clone the runner's git clone into the NFS-mounted build directory.  We
    # cannot use the runner's git clone directly because its location relative
    # to the build directory varies across runners, and that would cause ccache
    # to miss whenever the runner changes no matter how we set CCACHE_BASEDIR.
    # We've also tried creating a symlink to the runner's git clone at the
    # start of every job, but that causes ccache to miss in the same manner, so
    # apparently the symlink is expanded somewhere.
    - git --version
    - time git clone `pwd` $BUILD_DIR/source

leconte (setup):
  extends: [.leconte, .setup]

oswald02 (setup):
  extends: [.oswald02, .setup]

explorer (setup):
  extends: [.explorer, .setup]

milan (setup):
  extends: [.milan, .setup]

no-asserts (setup):
  extends: [.no-asserts, .setup]

debug (setup):
  extends: [.debug, .setup]

#-------------------------------------------------------------------------------
# cleanup
#-------------------------------------------------------------------------------

.rm-build-dir:
  variables:
    GIT_STRATEGY: none
  script:
    - pwd
    - echo $BUILD_DIR
    - rm -rf $BUILD_DIR
    - rmdir $BUILD_DIR_PROJ || true

.cleanup:
  stage: cleanup
  extends: .rm-build-dir

.manual-cleanup:
  stage: manual cleanup
  extends: .rm-build-dir
  when: manual
  needs: []

leconte (cleanup):
  extends: [.leconte, .cleanup]
  needs:
    - job: leconte (test)
      artifacts: false
    - job: leconte (vv)
      artifacts: false
      optional: true
    - job: leconte (kokkos)
      artifacts: false
      optional: true

oswald02 (cleanup):
  extends: [.oswald02, .cleanup]
  needs:
    - job: oswald02 (test)
      artifacts: false
    - job: oswald02 (vv)
      artifacts: false
      optional: true
    - job: oswald02 (kokkos)
      artifacts: false
      optional: true

explorer (cleanup):
  extends: [.explorer, .cleanup]
  needs:
    - job: explorer (test)
      artifacts: false
    - job: explorer (vv)
      artifacts: false
      optional: true
    - job: explorer (kokkos)
      artifacts: false
      optional: true

milan (cleanup):
  extends: [.milan, .cleanup]
  needs:
    - job: milan (test)
      artifacts: false
    - job: milan (vv)
      artifacts: false
      optional: true
    - job: milan (kokkos)
      artifacts: false
      optional: true

no-asserts (cleanup):
  extends: [.no-asserts, .cleanup]
  needs:
    - job: no-asserts (test)
      artifacts: false
    - job: no-asserts (vv)
      artifacts: false
      optional: true
    - job: no-asserts (kokkos)
      artifacts: false
      optional: true

debug (cleanup):
  extends: [.debug, .cleanup]
  needs:
    - job: debug (test)
      artifacts: false
    - job: debug (vv)
      artifacts: false
      optional: true
    - job: debug (kokkos)
      artifacts: false
      optional: true

leconte (manual cleanup):
  extends: [.leconte, .manual-cleanup]

oswald02 (manual cleanup):
  extends: [.oswald02, .manual-cleanup]

explorer (manual cleanup):
  extends: [.explorer, .manual-cleanup]

milan (manual cleanup):
  extends: [.milan, .manual-cleanup]

no-asserts (manual cleanup):
  extends: [.no-asserts, .manual-cleanup]

debug (manual cleanup):
  extends: [.debug, .manual-cleanup]

z-cleanup-pipeline-builds:
  stage: manual cleanup
  when: manual
  needs: []
  tags: [shell, milan]
  variables:
    GIT_STRATEGY: none
  script:
    - echo $BUILD_DIRS
    - rm -rf $BUILD_DIRS

z-cleanup-project-builds:
  stage: manual cleanup
  when: manual
  needs: []
  tags: [shell, milan]
  variables:
    GIT_STRATEGY: none
  script:
    - echo $BUILD_DIR_PROJ
    - rm -rf $BUILD_DIR_PROJ

#-------------------------------------------------------------------------------
# config
#-------------------------------------------------------------------------------

.config:
  extends: .non-utility
  stage: config
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:cmake[collapsed=true]\r\e[0KRun cmake"
    - echo $CMAKE
    - $CMAKE --version
    - echo $CMAKE_BUILD_OPTS
    - echo $GCC_DIR
    - echo $LLVM_CCACHE_PARAMS
    - echo $PYTHON
    - $PYTHON --version
    - echo $LLVM_TARGETS_TO_BUILD
    - echo $LLVM_ENABLE_PROJECTS
    - echo $LLVM_ENABLE_RUNTIMES
    - time $CMAKE -G Ninja
                  $CMAKE_BUILD_OPTS
                  -DCMAKE_INSTALL_PREFIX=../install
                  -DLLVM_CCACHE_BUILD=ON
                  -DLLVM_USE_SPLIT_DWARF=true
                  -DCMAKE_C_COMPILER=gcc
                  -DCMAKE_CXX_COMPILER=g++
                  -DGCC_INSTALL_PREFIX=$GCC_DIR
                  -DLLVM_CCACHE_PARAMS="$LLVM_CCACHE_PARAMS"
                  -DLLVM_TARGETS_TO_BUILD="$LLVM_TARGETS_TO_BUILD"
                  -DLLVM_ENABLE_PROJECTS="$LLVM_ENABLE_PROJECTS"
                  -DLLVM_ENABLE_RUNTIMES="$LLVM_ENABLE_RUNTIMES"
                  -DPython3_EXECUTABLE=$PYTHON
                  -DLLVM_LIT_ARGS='-s -vv'
                  ../source/llvm
      |& tee $CI_PROJECT_DIR/cmake-log.txt
    - cp CMakeCache.txt $CI_PROJECT_DIR
    - echo -e "\e[0Ksection_end:`date +%s`:cmake\r\e[0K"
  artifacts:
    when: always
    paths: [cmake-log.txt, CMakeCache.txt]

leconte (config):
  extends: [.leconte, .config]
  needs:
    - job: leconte (setup)
      artifacts: false

oswald02 (config):
  extends: [.oswald02, .config]
  needs:
    - job: oswald02 (setup)
      artifacts: false

explorer (config):
  extends: [.explorer, .config]
  needs:
    - job: explorer (setup)
      artifacts: false

milan (config):
  extends: [.milan, .config]
  needs:
    - job: milan (setup)
      artifacts: false

no-asserts (config):
  extends: [.no-asserts, .config]
  needs:
    - job: no-asserts (setup)
      artifacts: false

debug (config):
  extends: [.debug, .config]
  needs:
    - job: debug (setup)
      artifacts: false

#-------------------------------------------------------------------------------
# build
#-------------------------------------------------------------------------------

.build:
  extends: .non-utility
  stage: build
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:build[collapsed=true]\r\e[0KBuild"
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc` |& tee $CI_PROJECT_DIR/build-log.txt
    - time $NINJA -l `nproc` install
    - echo -e "\e[0Ksection_end:`date +%s`:build\r\e[0K"
  artifacts:
    when: always
    paths: [build-log.txt]

leconte (build):
  extends: [.leconte, .build]
  needs:
    - job: leconte (config)
      artifacts: false

oswald02 (build):
  extends: [.oswald02, .build]
  needs:
    - job: oswald02 (config)
      artifacts: false

explorer (build):
  extends: [.explorer, .build]
  needs:
    - job: explorer (config)
      artifacts: false

milan (build):
  extends: [.milan, .build]
  needs:
    - job: milan (config)
      artifacts: false

no-asserts (build):
  extends: [.no-asserts, .build]
  needs:
    - job: no-asserts (config)
      artifacts: false

debug (build):
  extends: [.debug, .build]
  needs:
    - job: debug (config)
      artifacts: false

#-------------------------------------------------------------------------------
# test
#-------------------------------------------------------------------------------

.test:
  extends: .non-utility
  stage: test
  script:
    - echo $CHECK_TARGETS
    - echo $NINJA
    - $NINJA --version
    #...........................................................................
    # Build test suite before running it so we can time those steps separately.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:build_regression_tests[collapsed=true]\r\e[0KBuild regression test suite"
    - time LIT_FILTER_OUT=. LIT_OPTS=--allow-empty-runs
      $NINJA -l `nproc` $CHECK_TARGETS
      |& tee $CI_PROJECT_DIR/check-all-build-log.txt
    - echo -e "\e[0Ksection_end:`date +%s`:build_regression_tests\r\e[0K"
    #...........................................................................
    # Check that no misconfiguration is quietly disabling key features and thus
    # tests.  For example, not adding the gitlab-runner account to the required
    # render/video groups quietly disables OpenMP offloading to AMD GPU.
    #
    # Check that device counts are computed correctly by the test suite based on
    # known device counts for each host.
    #
    # A grep failure within an "if" terminates the "if" as expected, but somehow
    # it doesn't cause the job to fail or prevent commands in subsequent list
    # items from executing unless we have the "|| false" after the "fi".  This
    # doesn't make sense to me, but it's how gitlab CI apparently works right
    # now.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:check_regression_tests[collapsed=true]\r\e[0KCheck regression test suite config"
    - tl=$CI_PROJECT_DIR/check-all-show-tests.txt
    - LIT_OPTS=--show-tests $NINJA $CHECK_TARGETS > $tl 2>&1
    - echo "$CPU_TRIPLE" "$CPU_COUNT" &&
      echo "$GPU_TRIPLE" "$GPU_COUNT"
    - echo "Test counts for libomptarget "'::'" $CPU_TRIPLE (expecting > 0):" &&
      grep -c "^ *libomptarget "'::'" $CPU_TRIPLE ::" $tl
    - if test x"$GPU_TRIPLE" != x; then
         echo "Test counts for libomptarget "'::'" $GPU_TRIPLE (expecting > 0):"
         && grep -c "^ *libomptarget "'::'" $GPU_TRIPLE ::" $tl;
      fi || false
    - clacc_branch=`
        echo "$CI_COMMIT_BRANCH" |
        grep '^\(clacc\|jdenny-openacc\)' |
        grep -v '^clacc/llvm.org-ci/' ||
        true`
    - echo "$clacc_branch"
    - if test x"$clacc_branch" != x; then
        echo "Test counts for libacc2omp "'::'" $CPU_TRIPLE (expecting > 0):" &&
        grep -c "^ *libacc2omp "'::'" $CPU_TRIPLE ::" $tl &&
        prefix="Device counts for" &&
        echo "Device counts for $CPU_TRIPLE (expecting $CPU_COUNT):" &&
        for suite in "libacc2omp "'::'" $CPU_TRIPLE"
                     "libacc2omp "'::'" multitarget"
                     "Clang"; do
          grep "$prefix '$suite'.*'$CPU_TRIPLE'"':'" $CPU_COUNT[,}]" $tl;
        done &&
        if test x"$GPU_TRIPLE" != x; then
          echo "Test counts for libacc2omp "'::'" $GPU_TRIPLE (expecting > 0):"
          && grep -c "^ *libacc2omp "'::'" $GPU_TRIPLE ::" $tl &&
          echo "Device counts for $GPU_TRIPLE (expecting $GPU_COUNT):" &&
          for suite in "libacc2omp "'::'" $GPU_TRIPLE"
                       "libacc2omp "'::'" multitarget"
                       "Clang"; do
            grep "$prefix '$suite'.*'$GPU_TRIPLE'"':'" $GPU_COUNT[,}]" $tl;
          done
        fi
      fi || false
    - echo -e "\e[0Ksection_end:`date +%s`:check_regression_tests\r\e[0K"
    #...........................................................................
    # Run the test suite.
    #
    # LIT_NPROC_DIVISOR is set to limit the number of tests launched at once so
    # we don't overwhelm the accelerators (leconte GPUs, in particular),
    # producing OpenMP offload test failures.
    #
    # ulimit -t does not terminate processes that are hung and not using CPUs,
    # but hopefully lit's --timeout will.  40 mins ought to be long enough for
    # any regression test.
    #
    # In case check-all runs multiple lit invocations (e.g., a separate
    # invocation for openmp because it's in LLVM_ENABLE_RUNTIMES), use lit's
    # --ignore-fail so that all lit invocations actually run.  The count printed
    # by grep tells us how many test suite summaries we need to search for.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:run_regression_tests[collapsed=true]\r\e[0KRun regression test suite"
    - export LIT_XFAIL=`
        echo "$LIT_XFAIL"
        | sed -e 's/\([^:]\)  *\([^:]\)/\1;\2/g' -e 's/^ *//' -e 's/ *$//'
      `
    - export LIT_XFAIL_NOT=`
        echo "$LIT_XFAIL_NOT"
        | sed -e 's/\([^:]\)  *\([^:]\)/\1;\2/g' -e 's/^ *//' -e 's/ *$//'
      `
    - echo "$LIT_XFAIL"
    - echo "$LIT_XFAIL_NOT"
    - NPROC=`nproc`
    - echo "$NPROC"
    - echo "$LIT_NPROC_DIVISOR"
    - time FILECHECK_OPTS='-dump-input-filter=all -vv -color'
      LIT_OPTS="
        --timeout 2400 -j `expr $NPROC / $LIT_NPROC_DIVISOR`
        --ignore-fail --xunit-xml-output $CI_PROJECT_DIR/check-all.xml
        --show-xfail
      "
      $NINJA -l `nproc` $CHECK_TARGETS
      |& tee $CI_PROJECT_DIR/check-all-log.txt
    - echo -e "\e[0Ksection_end:`date +%s`:run_regression_tests\r\e[0K"
    #...........................................................................
    # Check for regression test failure.
    #...........................................................................
    - "! grep -c \"'--ignore-fail' was specified\"
                 $CI_PROJECT_DIR/check-all-log.txt"
  artifacts:
    when: always
    paths: [check-all-build-log.txt, check-all-show-tests.txt,
            check-all-log.txt, check-all.xml]
    reports:
      junit: check-all.xml

leconte (test):
  extends: [.leconte, .test]
  needs:
    - job: leconte (build)
      artifacts: false

oswald02 (test):
  extends: [.oswald02, .test]
  needs:
    - job: oswald02 (build)
      artifacts: false

explorer (test):
  extends: [.explorer, .test]
  needs:
    - job: explorer (build)
      artifacts: false

milan (test):
  extends: [.milan, .test]
  needs:
    - job: milan (build)
      artifacts: false

no-asserts (test):
  extends: [.no-asserts, .test]
  needs:
    - job: no-asserts (build)
      artifacts: false

debug (test):
  extends: [.debug, .test]
  needs:
    - job: debug (build)
      artifacts: false

#-------------------------------------------------------------------------------
# Clacc-only jobs.
#-------------------------------------------------------------------------------

.clacc:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(clacc|jdenny-openacc)/ &&
          $CI_COMMIT_BRANCH !~ /^clacc\/llvm.org-ci\//

#-------------------------------------------------------------------------------
# vv
#
# Clone llvm-test-suite.git and the OpenACC V&V suite, and run the latter via
# the former.
#-------------------------------------------------------------------------------

.vv:
  extends: [.non-utility, .clacc]
  stage: vv
  script:
    # Systems without a GPU omit -fopenmp-targets, and this causes linking
    # problems for libomptarget.so if we don't extend LD_LIBRARY_PATH.
    - if test x"$GPU_TRIPLE" = x; then
        export LD_LIBRARY_PATH=$BUILD_DIR/install/lib:$LD_LIBRARY_PATH;
      fi
    - export VV_COMP_LIT_XFAIL=`
        echo "$VV_COMP_LIT_XFAIL"
        | sed -e 's/\([^:]\)  *\([^:]\)/\1;\2/g' -e 's/^ *//' -e 's/ *$//'
      `
    - export VV_RUN_LIT_XFAIL=`
        echo "$VV_RUN_LIT_XFAIL"
        | sed -e 's/\([^:]\)  *\([^:]\)/\1;\2/g' -e 's/^ *//' -e 's/ *$//'
      `
    #...........................................................................
    # Clone llvm-test-suite.git and the OpenACC V&V suite.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:clone_vv_tests[collapsed=true]\r\e[0KClone llvm-test-suite.git and OpenACC V&V suite"
    - cd ..
    - rm -rf openacc-vv
    - mkdir openacc-vv
    - cd openacc-vv
    - git init llvm-test-suite
    - cd llvm-test-suite
    - git remote add origin https://github.com/llvm-doe-org/llvm-test-suite.git
    # We exclude some very large directories from llvm-test-suite.git so it
    # doesn't take so long to clone.
    - git config core.sparseCheckout true
    - echo '/*'              >> .git/info/sparse-checkout
    - echo '!/ABI-Testsuite' >> .git/info/sparse-checkout
    - echo '!/Bitcode'       >> .git/info/sparse-checkout
    - echo '!/MultiSource'   >> .git/info/sparse-checkout
    - echo $VV_LLVM_TEST_SUITE_COMMIT
    - git fetch --depth=1 --filter=blob:none origin $VV_LLVM_TEST_SUITE_COMMIT
    - time git checkout $VV_LLVM_TEST_SUITE_COMMIT
    - cd ..
    - time git clone https://github.com/OpenACCUserGroup/OpenACCV-V.git
    - cd OpenACCV-V
    - echo $VV_COMMIT
    - git checkout $VV_COMMIT
    - echo -e "\e[0Ksection_end:`date +%s`:clone_vv_tests\r\e[0K"
    #...........................................................................
    # Build the OpenACC V&V suite.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:build_vv_tests[collapsed=true]\r\e[0KBuild OpenACC V&V suite"
    # On explorer when using -fopenmp-targets=amdgcn-amd-amdhsa, Clang complains
    # about the definition of false/true in acc_testsuite.h, and all tests fail
    # as a result.  That's not an OpenACC-specific support issue, so we work
    # around it to get meaningful OpenACC results.
    - sed -i -e 's/typedef enum { false, true } bool;/#include <stdbool.h>/'
          Tests/acc_testsuite.h
    - cd ../llvm-test-suite
    - mkdir build
    - cd build
    # -fopenacc-fake-* options enable building OpenACC applications that behave
    # correctly without a full implementation of the associated OpenACC
    # features.  The V&V suite is a convenient way to check for unexpected
    # issues with the incomplete implementations.
    - export VV_CFLAGS="-fopenacc -fopenacc-fake-async-wait
                        -fopenacc-fake-tile-clause -lm"
    - if test x"$GPU_TRIPLE" != x; then
        export VV_CFLAGS="$VV_CFLAGS -fopenmp-targets=$GPU_TRIPLE";
      fi
    - echo "$VV_CFLAGS"
    - time $CMAKE -G Ninja
                  -DCMAKE_BUILD_TYPE=Release
                  -DTEST_SUITE_OPENACCVV_ROOT=`pwd`/../../OpenACCV-V
                  -DCMAKE_C_COMPILER=`pwd`/../../../install/bin/clang
                  -DCMAKE_CXX_COMPILER=`pwd`/../../../install/bin/clang++
                  -DTEST_SUITE_SUBDIRS=External/openacc_vv
                  -DOpenACC_C_FLAGS="$VV_CFLAGS"
                  -DOpenACC_CXX_FLAGS="$VV_CFLAGS"
                  ..
      |& tee $CI_PROJECT_DIR/openacc-vv-build-log.txt
    # Some tests might fail to compile, but we don't want that to prevent
    # compiling and running the rest of the tests, so we use -k with a large
    # value we'll never reach.
    - time $NINJA -l `nproc` -k 99999
      |& tee -a $CI_PROJECT_DIR/openacc-vv-build-log.txt
      || true
    - echo -e "\e[0Ksection_end:`date +%s`:build_vv_tests\r\e[0K"
    #...........................................................................
    # Run OpenaCC V&V suite tests for which we expect compilation failures.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:run_vv_tests_comp_xfails[collapsed=true]\r\e[0KRun OpenACC V&V suite expected compilation failures"
    - echo "$VV_COMP_LIT_XFAIL"
    - if test x"$VV_COMP_LIT_XFAIL" = x; then
        echo 'No compilation fails expected'
          |& tee $CI_PROJECT_DIR/openacc-vv-log.txt;
      else
        echo 'Results for expected compilation fails:'
          |& tee $CI_PROJECT_DIR/openacc-vv-log.txt &&
        time for test in `echo "$VV_COMP_LIT_XFAIL" |
                          sed -e 's/;/ /g' -e 's/\./\\./g'`; do
          ../../../build/bin/llvm-lit -s -vv --timeout 2400 --ignore-fail
                                      --filter="$test" .  >test-result 2>&1 &&
          if grep -q 'Executable Missing'":"' *1$' test-result; then
            echo "  expected compilation fail"':'" $test";
          else
            echo "  unexpected compilation pass"':'" $test";
            cat test-result;
          fi
        done |& tee -a $CI_PROJECT_DIR/openacc-vv-log.txt;
      fi
    - echo -e "\e[0Ksection_end:`date +%s`:run_vv_tests_comp_xfails\r\e[0K"
    #...........................................................................
    # Run remaining OpenaCC V&V suite tests.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:run_vv_tests[collapsed=true]\r\e[0KRun remaining OpenACC V&V suite tests"
    - NPROC=`nproc`
    - echo "$NPROC"
    - echo "$LIT_NPROC_DIVISOR"
    - if test x"$VV_COMP_LIT_XFAIL" != x; then
        export LIT_FILTER_OUT=`echo "$VV_COMP_LIT_XFAIL" |
                               sed -e 's/;/|/g' -e 's/\./\\./g'`;
      fi
    - echo "$LIT_FILTER_OUT"
    - echo "$VV_RUN_LIT_XFAIL"
    - time ../../../build/bin/llvm-lit
        -s -vv --timeout 2400 -j `expr $NPROC / $LIT_NPROC_DIVISOR`
        --ignore-fail --xunit-xml-output $CI_PROJECT_DIR/openacc-vv.xml
        --show-xfail --xfail="$VV_RUN_LIT_XFAIL" .
      |& tee -a $CI_PROJECT_DIR/openacc-vv-log.txt
    - echo -e "\e[0Ksection_end:`date +%s`:run_vv_tests\r\e[0K"
    #...........................................................................
    # Check for unexpected compilation or run results.
    #...........................................................................
    - "! grep -c
              \"'--ignore-fail' was specified\\|unexpected compilation pass\"
              $CI_PROJECT_DIR/openacc-vv-log.txt"
  artifacts:
    when: always
    paths: [openacc-vv-build-log.txt, openacc-vv-log.txt, openacc-vv.xml]
    reports:
      junit: openacc-vv.xml

leconte (vv):
  extends: [.leconte, .vv]
  needs:
    - job: leconte (build)
      artifacts: false

oswald02 (vv):
  extends: [.oswald02, .vv]
  needs:
    - job: oswald02 (build)
      artifacts: false

explorer (vv):
  extends: [.explorer, .vv]
  needs:
    - job: explorer (build)
      artifacts: false

milan (vv):
  extends: [.milan, .vv]
  needs:
    - job: milan (build)
      artifacts: false

no-asserts (vv):
  extends: [.no-asserts, .vv]
  needs:
    - job: no-asserts (build)
      artifacts: false

debug (vv):
  extends: [.debug, .vv]
  needs:
    - job: debug (build)
      artifacts: false

#-------------------------------------------------------------------------------
# kokkos
#
# Clone Kokkos and kokkos-ornl-int-test.git, and try to build some tests in the
# latter using required parts of the former.
#-------------------------------------------------------------------------------

.kokkos:
  extends: [.non-utility, .clacc]
  stage: kokkos
  script:
    # Systems without a GPU omit -fopenmp-targets, and this causes linking
    # problems for libomptarget.so if we don't extend LD_LIBRARY_PATH.
    - if test x"$GPU_TRIPLE" = x; then
        export LD_LIBRARY_PATH=$BUILD_DIR/install/lib:$LD_LIBRARY_PATH;
      fi
    #...........................................................................
    # Clone Kokkos.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:clone_kokkos[collapsed=true]\r\e[0KClone kokkos.git"
    - cd $BUILD_DIR
    - rm -rf kokkos
    - mkdir kokkos
    - cd kokkos
    - time git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@code.ornl.gov/jum/kokkos
    - cd kokkos
    - echo $KOKKOS_COMMIT
    - time git checkout $KOKKOS_COMMIT
    - echo -e "\e[0Ksection_end:`date +%s`:clone_kokkos\r\e[0K"
    #...........................................................................
    # Build kokkos.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:build_kokkos[collapsed=true]\r\e[0KBuild Kokkos"
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - echo $KOKKOS_CMAKE_OPTS
    - time $CMAKE -G Ninja
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_INSTALL_PREFIX=`pwd`/../install
        -DCMAKE_BINARY_DIR=`pwd`
        -DKokkos_ENABLE_OPENACC=On
        -DKokkos_ENABLE_HWLOC=Off
        -DKokkos_ENABLE_TESTS=On
        $KOKKOS_CMAKE_OPTS
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc` install |& tee $CI_PROJECT_DIR/kokkos-build-log.txt
    - echo -e "\e[0Ksection_end:`date +%s`:build_kokkos\r\e[0K"
    #...........................................................................
    # Run kokkos test suite.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:run_kokkos_tests[collapsed=true]\r\e[0KRun Kokkos test suite"
    - time $NINJA -l `nproc` test || KOKKOS_TEST_FAIL=1
    - cp $BUILD_DIR/kokkos/kokkos/build/Testing/Temporary/LastTest.log
         $CI_PROJECT_DIR/kokkos-test-log.txt
    - if test x$KOKKOS_TEST_FAIL = x1; then exit 1; fi
    - echo -e "\e[0Ksection_end:`date +%s`:run_kokkos_tests\r\e[0K"
    #...........................................................................
    # Clone kokkos-ornl-int-test.git.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:clone_kokkos_tests[collapsed=true]\r\e[0KClone kokkos-ornl-int-test.git"
    - cd $BUILD_DIR/kokkos
    - time git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@code.ornl.gov/f6l/kokkos-ornl-int-test
    - cd kokkos-ornl-int-test
    - echo $KOKKOS_TESTS_COMMIT
    - time git checkout $KOKKOS_TESTS_COMMIT
    - echo -e "\e[0Ksection_end:`date +%s`:clone_kokkos_tests\r\e[0K"
    #...........................................................................
    # Build and run kokkos-ornl-int-test.git/examples/openacc-parallel-reduce-md
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:openacc-parallel-reduce-md[collapsed=true]\r\e[0KCheck kokkos-ornl-int-test.git/examples/openacc-parallel-reduce-md"
    - cd $BUILD_DIR/kokkos/kokkos-ornl-int-test/examples/openacc-parallel-reduce-md
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - time $CMAKE -G Ninja
        -DKokkos_ROOT=$BUILD_DIR/kokkos/kokkos/install
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_FLAGS='-DVERIFY -O3 -lm'
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc`
    - time ./openacctest
    - echo -e "\e[0Ksection_end:`date +%s`:openacc-parallel-reduce-md\r\e[0K"
    #...........................................................................
    # Build and run
    # kokkos-ornl-int-test.git/examples/openacc-parallel-reduce-single
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:openacc-parallel-reduce-single[collapsed=true]\r\e[0KCheck kokkos-ornl-int-test.git/examples/openacc-parallel-reduce-single"
    - cd $BUILD_DIR/kokkos/kokkos-ornl-int-test/examples/openacc-parallel-reduce-single
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - time $CMAKE -G Ninja
        -DKokkos_ROOT=$BUILD_DIR/kokkos/kokkos/install
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_FLAGS='-DVERIFY -O3 -lm'
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc`
    - time ./openacctest
    - echo -e "\e[0Ksection_end:`date +%s`:openacc-parallel-reduce-single\r\e[0K"
    #...........................................................................
    # Build and run
    # kokkos-ornl-int-test.git/examples/openacc-parallel-reduce-team
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:openacc-parallel-reduce-team[collapsed=true]\r\e[0KCheck kokkos-ornl-int-test.git/examples/openacc-parallel-reduce-team"
    - cd $BUILD_DIR/kokkos/kokkos-ornl-int-test/examples/openacc-parallel-reduce-team
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - time $CMAKE -G Ninja
        -DKokkos_ROOT=$BUILD_DIR/kokkos/kokkos/install
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_FLAGS='-DVERIFY -O3 -lm'
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc`
    - time ./openacctest
    - echo -e "\e[0Ksection_end:`date +%s`:openacc-parallel-reduce-team\r\e[0K"
    #...........................................................................
    # Build and run kokkos-ornl-int-test.git/examples/openacc-performance
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:openacc-performance[collapsed=true]\r\e[0KCheck kokkos-ornl-int-test.git/examples/openacc-performance"
    - cd $BUILD_DIR/kokkos/kokkos-ornl-int-test/examples/openacc-performance
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - time $CMAKE -G Ninja
        -DKokkos_ROOT=$BUILD_DIR/kokkos/kokkos/install
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_FLAGS='-DVERIFY -O3 -lm'
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc`
    - time ./openacctest
    - echo -e "\e[0Ksection_end:`date +%s`:openacc-performance\r\e[0K"
    #...........................................................................
    # Build and run
    # kokkos-ornl-int-test.git/examples/openacc-performance-multidimensional
    #
    # It can be slow, so we set DSTEP to get just three iterations across a wide
    # range of sizes.  That should be sufficient to check behavior.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:openacc-performance-multidimensional[collapsed=true]\r\e[0KCheck kokkos-ornl-int-test.git/examples/openacc-performance-multidimensional"
    - cd $BUILD_DIR/kokkos/kokkos-ornl-int-test/examples/openacc-performance-multidimensional
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - time $CMAKE -G Ninja
        -DKokkos_ROOT=$BUILD_DIR/kokkos/kokkos/install
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_FLAGS='-DVERIFY -DDSTEP=4500 -O3 -lm'
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc`
    - time ./openacctest
    - echo -e "\e[0Ksection_end:`date +%s`:openacc-performance-multidimensional\r\e[0K"
    #...........................................................................
    # Build and run kokkos-ornl-int-test.git/examples/openacc-performance-teams
    #
    # On CPU-only systems, it can be slow and precision isn't as good, so we set
    # DSTEP to get just three iterations across a wide range of sizes, and we
    # increase EPSILON.  That should be sufficient to check basic behavior.
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:openacc-performance-teams[collapsed=true]\r\e[0KCheck kokkos-ornl-int-test.git/examples/openacc-performance-teams"
    - cd $BUILD_DIR/kokkos/kokkos-ornl-int-test/examples/openacc-performance-teams
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - time $CMAKE -G Ninja
        -DKokkos_ROOT=$BUILD_DIR/kokkos/kokkos/install
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_FLAGS='-DVERIFY -DDSTEP=4499 -DEPSILON=1e-3 -O3 -lm'
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc`
    - time ./openacctest
    - echo -e "\e[0Ksection_end:`date +%s`:openacc-performance-teams\r\e[0K"
    #...........................................................................
    # Build and run kokkos-ornl-int-test.git/examples/stream
    #...........................................................................
    - echo -e "\e[0Ksection_start:`date +%s`:stream[collapsed=true]\r\e[0KCheck kokkos-ornl-int-test.git/examples/stream"
    - cd $BUILD_DIR/kokkos/kokkos-ornl-int-test/examples/stream
    - mkdir build && cd build
    - echo $CMAKE
    - $CMAKE --version
    - time $CMAKE -G Ninja
        -DKokkos_ROOT=$BUILD_DIR/kokkos/kokkos/install
        -DCMAKE_CXX_COMPILER=$BUILD_DIR/install/bin/clang++
        -DCMAKE_CXX_FLAGS='-O3 -lm'
        ..
    - echo $NINJA
    - $NINJA --version
    - time $NINJA -l `nproc`
    - time ./stream
    - echo -e "\e[0Ksection_end:`date +%s`:stream\r\e[0K"
  artifacts:
    when: always
    paths: [kokkos-build-log.txt, kokkos-test-log.txt]

leconte (kokkos):
  extends: [.leconte, .kokkos]
  needs:
    - job: leconte (build)
      artifacts: false

oswald02 (kokkos):
  extends: [.oswald02, .kokkos]
  needs:
    - job: oswald02 (build)
      artifacts: false

explorer (kokkos):
  extends: [.explorer, .kokkos]
  needs:
    - job: explorer (build)
      artifacts: false

# On systems without a GPU, the kokkos examples use CPU parallelism, which
# effectively divides the time limit imposed by our default ulimit -t (1 hour)
# by the number of CPU threads (60), but 1 minute is not enough time for some
# of our Kokkos examples, so we increase it to 5 minutes for those cases.

milan (kokkos):
  extends: [.milan, .kokkos]
  variables:
    ULIMIT_T: 18000
  needs:
    - job: milan (build)
      artifacts: false

no-asserts (kokkos):
  extends: [.no-asserts, .kokkos]
  variables:
    ULIMIT_T: 18000
  needs:
    - job: no-asserts (build)
      artifacts: false

debug (kokkos):
  extends: [.debug, .kokkos]
  variables:
    ULIMIT_T: 18000
  needs:
    - job: debug (build)
      artifacts: false
