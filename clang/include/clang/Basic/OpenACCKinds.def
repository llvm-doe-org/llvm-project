//===--- OpenACCKinds.def - OpenACC directives and clauses list --*- C++ -*-==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
/// \file
/// This file defines the list of supported OpenACC directives, clauses, and
/// data attributes.
///
//===----------------------------------------------------------------------===//

#ifndef OPENACC_DIRECTIVE
#  define OPENACC_DIRECTIVE(Name)
#endif
#ifndef OPENACC_DIRECTIVE_EXT
#  define OPENACC_DIRECTIVE_EXT(Name, Str)
#endif
#ifndef OPENACC_DMA
#  define OPENACC_DMA(Name, Class)
#endif
#ifndef OPENACC_DSA_MAPPABLE
#  define OPENACC_DSA_MAPPABLE(Name, Class)
#endif
#ifndef OPENACC_DSA_UNMAPPABLE
#  define OPENACC_DSA_UNMAPPABLE(Name, Class)
#endif
#ifndef OPENACC_CLAUSE
#  define OPENACC_CLAUSE(Name, Class)
#endif
#ifndef OPENACC_CLAUSE_ALIAS
#  define OPENACC_CLAUSE_ALIAS(ClauseAlias, AliasedClause, Class) \
     OPENACC_CLAUSE_ALIAS_##AliasedClause(ClauseAlias)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_copy
#  define OPENACC_CLAUSE_ALIAS_copy(Name)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_copyin
#  define OPENACC_CLAUSE_ALIAS_copyin(Name)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_copyout
#  define OPENACC_CLAUSE_ALIAS_copyout(Name)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_create
#  define OPENACC_CLAUSE_ALIAS_create(Name)
#endif
#ifndef OPENACC_CLAUSE_ALIAS_self
#  define OPENACC_CLAUSE_ALIAS_self(Name)
#endif
#ifndef OPENACC_UPDATE_DMA
#  define OPENACC_UPDATE_DMA(Name)
#endif
#ifndef OPENACC_UPDATE_DSA
#  define OPENACC_UPDATE_DSA(Name)
#endif
#ifndef OPENACC_ENTER_DATA_DMA
#  define OPENACC_ENTER_DATA_DMA(Name)
#endif
#ifndef OPENACC_ENTER_DATA_DSA
#  define OPENACC_ENTER_DATA_DSA(Name)
#endif
#ifndef OPENACC_EXIT_DATA_DMA
#  define OPENACC_EXIT_DATA_DMA(Name)
#endif
#ifndef OPENACC_EXIT_DATA_DSA
#  define OPENACC_EXIT_DATA_DSA(Name)
#endif
#ifndef OPENACC_DATA_DMA
#  define OPENACC_DATA_DMA(Name)
#endif
#ifndef OPENACC_DATA_DSA
#  define OPENACC_DATA_DSA(Name)
#endif
#ifndef OPENACC_PARALLEL_DMA
#  define OPENACC_PARALLEL_DMA(Name)
#endif
#ifndef OPENACC_PARALLEL_DSA
#  define OPENACC_PARALLEL_DSA(Name)
#endif
#ifndef OPENACC_LOOP_DMA
#  define OPENACC_LOOP_DMA(Name)
#endif
#ifndef OPENACC_LOOP_DSA
#  define OPENACC_LOOP_DSA(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_DMA
#  define OPENACC_PARALLEL_LOOP_DMA(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_DSA
#  define OPENACC_PARALLEL_LOOP_DSA(Name)
#endif
#ifndef OPENACC_UPDATE_CLAUSE
#  define OPENACC_UPDATE_CLAUSE(Name)
#endif
#ifndef OPENACC_ENTER_DATA_CLAUSE
#  define OPENACC_ENTER_DATA_CLAUSE(Name)
#endif
#ifndef OPENACC_EXIT_DATA_CLAUSE
#  define OPENACC_EXIT_DATA_CLAUSE(Name)
#endif
#ifndef OPENACC_DATA_CLAUSE
#  define OPENACC_DATA_CLAUSE(Name)
#endif
#ifndef OPENACC_PARALLEL_CLAUSE
#  define OPENACC_PARALLEL_CLAUSE(Name)
#endif
#ifndef OPENACC_LOOP_CLAUSE
#  define OPENACC_LOOP_CLAUSE(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_CLAUSE
#  define OPENACC_PARALLEL_LOOP_CLAUSE(Name)
#endif
#ifndef OPENACC_ATOMIC_CLAUSE
#  define OPENACC_ATOMIC_CLAUSE(Name)
#endif
#ifndef OPENACC_ROUTINE_CLAUSE
#  define OPENACC_ROUTINE_CLAUSE(Name)
#endif
#ifndef OPENACC_UPDATE_PARENT
#  define OPENACC_UPDATE_PARENT(Name)
#endif
#ifndef OPENACC_ENTER_DATA_PARENT
#  define OPENACC_ENTER_DATA_PARENT(Name)
#endif
#ifndef OPENACC_EXIT_DATA_PARENT
#  define OPENACC_EXIT_DATA_PARENT(Name)
#endif
#ifndef OPENACC_DATA_PARENT
#  define OPENACC_DATA_PARENT(Name)
#endif
#ifndef OPENACC_PARALLEL_PARENT
#  define OPENACC_PARALLEL_PARENT(Name)
#endif
#ifndef OPENACC_LOOP_PARENT
#  define OPENACC_LOOP_PARENT(Name)
#endif
#ifndef OPENACC_PARALLEL_LOOP_PARENT
#  define OPENACC_PARALLEL_LOOP_PARENT(Name)
#endif
#ifndef OPENACC_ATOMIC_PARENT
#  define OPENACC_ATOMIC_PARENT(Name)
#endif
#ifndef OPENACC_ROUTINE_PARENT
#  define OPENACC_ROUTINE_PARENT(Name)
#endif

#define OPENACC_ALIASED_CLAUSE(Def, Name, Class) \
  Def(Name, Class)                               \
  OPENACC_CLAUSE_ALIAS_##Name(Name)
#define OPENACC_CLAUSE_AND_DMA(Name, Class) \
  OPENACC_CLAUSE(Name, Class)               \
  OPENACC_DMA(Name, Class)
#define OPENACC_CLAUSE_AND_DSA_MAPPABLE(Name, Class) \
  OPENACC_CLAUSE(Name, Class)                        \
  OPENACC_DSA_MAPPABLE(Name, Class)
#define OPENACC_CLAUSE_AND_DSA_UNMAPPABLE(Name, Class) \
  OPENACC_CLAUSE(Name, Class)                          \
  OPENACC_DSA_UNMAPPABLE(Name, Class)
#define OPENACC_ENTER_DATA_CLAUSE_AND_DMA(Name) \
  OPENACC_ENTER_DATA_CLAUSE(Name)               \
  OPENACC_ENTER_DATA_DMA(Name)
#define OPENACC_EXIT_DATA_CLAUSE_AND_DMA(Name) \
  OPENACC_EXIT_DATA_CLAUSE(Name)               \
  OPENACC_EXIT_DATA_DMA(Name)
#define OPENACC_DATA_CLAUSE_AND_DMA(Name) \
  OPENACC_DATA_CLAUSE(Name)               \
  OPENACC_DATA_DMA(Name)
#define OPENACC_PARALLEL_CLAUSE_AND_DMA(Name) \
  OPENACC_PARALLEL_CLAUSE(Name)               \
  OPENACC_PARALLEL_DMA(Name)
#define OPENACC_PARALLEL_CLAUSE_AND_DSA(Name) \
  OPENACC_PARALLEL_CLAUSE(Name)               \
  OPENACC_PARALLEL_DSA(Name)
#define OPENACC_LOOP_CLAUSE_AND_DSA(Name) \
  OPENACC_LOOP_CLAUSE(Name)               \
  OPENACC_LOOP_DSA(Name)

// OpenACC directives.
OPENACC_DIRECTIVE(update)
OPENACC_DIRECTIVE_EXT(enter_data, "enter data")
OPENACC_DIRECTIVE_EXT(exit_data, "exit data")
OPENACC_DIRECTIVE(data)
OPENACC_DIRECTIVE(parallel)
OPENACC_DIRECTIVE(loop)
OPENACC_DIRECTIVE_EXT(parallel_loop, "parallel loop")
OPENACC_DIRECTIVE(atomic)
OPENACC_DIRECTIVE(routine)

// Specifying and iterating OpenACC clauses, data attributes (DAs), data
// mapping attributes (DMAs), data sharing attributes (DSAs), and clause
// aliases.
//
// Clang partitions OpenACC DAs into DMAs and DSAs:
//
//   - The DMAs are the following plus their aliases:
//     - nomap (default)
//     - present
//     - copy
//     - copyin
//     - copyout
//     - create
//     - no_create
//     - delete
//   - The DSAs are the following:
//     - shared (default)
//     - reduction
//     - firstprivate
//     - private
//
// Every variable has at most one DMA and one DSA on an OpenACC construct.  The
// default DA in each group is not specified by OpenACC 3.0.  Clang can
// implicitly determine it on a construct if the OpenACC spec specifies no
// other explicitly determined, predetermined, or implicitly determined DA from
// that group and the group is relevant to the construct (for example, DMAs are
// not relevant to acc loop).  The DAs in each group are mutually exclusive.
//  Mappable DSAs can be combined with any DMA.  Unmappable DSAs can be
// combined with nomap but no other DMA.
//
// Every DA is also a clause and has an ACC*Clause class so it can be stored
// like a predetermined or implicit clause even if it's not permitted as
// an explicit clause on any directive (e.g., ACCSharedClause).
//
// Among a set of aliases for a clause, one is the canonical name used in most
// occurrences in the OpenACC spec and other documentation.  For brevity, we
// refer to it as the "aliased clause" (such as "copy") and the others as the
// "clause aliases" (such as "pcopy" and "present_or_copy").  Clang handles
// each clause alias exactly like the aliased clause except it parses and
// prints each clause alias (including in parser diagnostics) under its own
// name.  Thus, each clause alias has a separate member in OpenACCClauseKind
// but not in OpenACCDMAKind or OpenACCDSAKind, where at most the aliased
// clause appears (sema diagnostics often use just the aliased clause's name).
// A clause alias shares the same ACC*Clause class as the aliased clause, but
// objects of the class store the individual OpenACCClauseKind so they can be
// printed correctly.
//
// Below, define clauses, DAs, and clause aliases as follows:
//
//   - OPENACC_CLAUSE_AND_(DMA|DSA_MAPPABLE|DSA_UNMAPPABLE): Specify one of
//     these for each DA clause unless it is an aliased clause or clause alias.
//   - OPENACC_CLAUSE: Specify this for each non-DA clause unless it is an
//     aliased clause or clause alias.  Don't specify this directly for DA
//     clauses as it's implied by the DA macros above.
//   - OPENACC_ALIASED_CLAUSE: Specify this for each aliased clause.  The first
//     argument is the macro above that would be appropriate for this clause if
//     it had no aliases.  Also, at the beginning of this file, add an empty
//     definition for OPENACC_CLAUSE_ALIAS_<AliasedClause>(Name) when it's not
//     already defined, and undefine it at the end of this file.
//   - OPENACC_CLAUSE_ALIAS: Specify this for each clause alias.  The specified
//     ACC*Clause class must be the same as for the aliased clause.
//   - OPENACC_(DMA|DSA_MAPPABLE|DSA_UNMAPPABLE): Don't specify these directly
//     as they're implied by the DA macros above.
//
// Below, define what clauses and DAs are permitted on each directive
// <Directive> as follows:
//
//   - OPENACC_<Directive>_CLAUSE_AND_(DMA|DSA): Specify one of these for each
//     DA clause that is permitted as an explicit clause on <Directive> (e.g.,
//     don't specify this for shared as it's not permitted to be explicit) and
//     that is not a clause alias (but it's fine if it's an aliased clause).
//   - OPENACC_<Directive>_CLAUSE: Specify this for each non-DA clause and each
//     clause alias (but not an aliased clause).
//   - OPENACC_<Directive>_(DMA|DSA): Specify one of these for each DA that is
//     not permitted as an explicit clause on <Directive> but is permitted as a
//     DA (e.g., shared).
//
// So that an aliased clause and all its aliases are handled consistently,
// Clang should never reference their OpenACCClauseKind members directly except
// that the member for the aliased clause must be referenced within the
// ACC*Clause class and when constructing the ACC*Clause object for an implicit
// clause.  In all other cases, handle them with a common pattern, as follows:
//
//    - Define OPENACC_CLAUSE_ALIAS_<AliasedClause> and then include this file
//      to iterate the OpenACCClauseKind members for a specific aliased clause
//      and all its aliases.
//    - Define OPENACC_CLAUSE and OPENACC_CLAUSE_ALIAS and then include this
//      file to iterate the OpenACCClauseKind members for all aliased clauses
//      and their aliases.
//    - Define OPENACC_CLAUSE and then include this file to iterate all
//      ACC*Clause classes.

// Clauses, DAs, and clause aliases.
OPENACC_CLAUSE_AND_DMA(nomap, ACCNomapClause)
OPENACC_CLAUSE_AND_DMA(present, ACCPresentClause)
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE_AND_DMA, copy, ACCCopyClause)
OPENACC_CLAUSE_ALIAS(pcopy, copy, ACCCopyClause)
OPENACC_CLAUSE_ALIAS(present_or_copy, copy, ACCCopyClause)
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE_AND_DMA, copyin, ACCCopyinClause)
OPENACC_CLAUSE_ALIAS(pcopyin, copyin, ACCCopyinClause)
OPENACC_CLAUSE_ALIAS(present_or_copyin, copyin, ACCCopyinClause)
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE_AND_DMA, copyout, ACCCopyoutClause)
OPENACC_CLAUSE_ALIAS(pcopyout, copyout, ACCCopyoutClause)
OPENACC_CLAUSE_ALIAS(present_or_copyout, copyout, ACCCopyoutClause)
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE_AND_DMA, create, ACCCreateClause)
OPENACC_CLAUSE_ALIAS(pcreate, create, ACCCreateClause)
OPENACC_CLAUSE_ALIAS(present_or_create, create, ACCCreateClause)
OPENACC_CLAUSE_AND_DMA(no_create, ACCNoCreateClause)
OPENACC_CLAUSE_AND_DMA(delete, ACCDeleteClause)
OPENACC_CLAUSE_AND_DSA_MAPPABLE(shared, ACCSharedClause)
OPENACC_CLAUSE_AND_DSA_MAPPABLE(reduction, ACCReductionClause)
OPENACC_CLAUSE_AND_DSA_UNMAPPABLE(private, ACCPrivateClause)
OPENACC_CLAUSE_AND_DSA_UNMAPPABLE(firstprivate, ACCFirstprivateClause)
OPENACC_CLAUSE(if, ACCIfClause)
OPENACC_CLAUSE(if_present, ACCIfPresentClause)
OPENACC_ALIASED_CLAUSE(OPENACC_CLAUSE, self, ACCSelfClause)
OPENACC_CLAUSE_ALIAS(host, self, ACCSelfClause)
OPENACC_CLAUSE(device, ACCDeviceClause)
OPENACC_CLAUSE(num_gangs, ACCNumGangsClause)
OPENACC_CLAUSE(num_workers, ACCNumWorkersClause)
OPENACC_CLAUSE(vector_length, ACCVectorLengthClause)
OPENACC_CLAUSE(seq, ACCSeqClause)
OPENACC_CLAUSE(independent, ACCIndependentClause)
OPENACC_CLAUSE(auto, ACCAutoClause)
OPENACC_CLAUSE(gang, ACCGangClause)
OPENACC_CLAUSE(worker, ACCWorkerClause)
OPENACC_CLAUSE(vector, ACCVectorClause)
OPENACC_CLAUSE(collapse, ACCCollapseClause)
OPENACC_CLAUSE(read, ACCReadClause)
OPENACC_CLAUSE(write, ACCWriteClause)
OPENACC_CLAUSE(update, ACCUpdateClause)
OPENACC_CLAUSE(capture, ACCCaptureClause)
OPENACC_CLAUSE(compare, ACCCompareClause)

// Explicit clauses allowed for OpenACC directive 'update'.
OPENACC_UPDATE_CLAUSE(if)
OPENACC_UPDATE_CLAUSE(if_present)
OPENACC_UPDATE_CLAUSE(self)
OPENACC_UPDATE_CLAUSE(host)
OPENACC_UPDATE_CLAUSE(device)

// Explicit clauses and DAs allowed for OpenACC directive 'enter data'.
OPENACC_ENTER_DATA_CLAUSE_AND_DMA(copyin)
OPENACC_ENTER_DATA_CLAUSE(pcopyin)
OPENACC_ENTER_DATA_CLAUSE(present_or_copyin)
OPENACC_ENTER_DATA_CLAUSE_AND_DMA(create)
OPENACC_ENTER_DATA_CLAUSE(pcreate)
OPENACC_ENTER_DATA_CLAUSE(present_or_create)

// Explicit clauses and DAs allowed for OpenACC directive 'exit data'.
OPENACC_EXIT_DATA_CLAUSE_AND_DMA(copyout)
OPENACC_EXIT_DATA_CLAUSE(pcopyout)
OPENACC_EXIT_DATA_CLAUSE(present_or_copyout)
OPENACC_EXIT_DATA_CLAUSE_AND_DMA(delete)

// Explicit clauses and DAs allowed for OpenACC directive 'data'.
OPENACC_DATA_DMA(nomap)
OPENACC_DATA_CLAUSE_AND_DMA(present)
OPENACC_DATA_CLAUSE_AND_DMA(copy)
OPENACC_DATA_CLAUSE(pcopy)
OPENACC_DATA_CLAUSE(present_or_copy)
OPENACC_DATA_CLAUSE_AND_DMA(copyin)
OPENACC_DATA_CLAUSE(pcopyin)
OPENACC_DATA_CLAUSE(present_or_copyin)
OPENACC_DATA_CLAUSE_AND_DMA(copyout)
OPENACC_DATA_CLAUSE(pcopyout)
OPENACC_DATA_CLAUSE(present_or_copyout)
OPENACC_DATA_CLAUSE_AND_DMA(create)
OPENACC_DATA_CLAUSE(pcreate)
OPENACC_DATA_CLAUSE(present_or_create)
OPENACC_DATA_CLAUSE_AND_DMA(no_create)

// Explicit clauses and DAs allowed for OpenACC directive 'parallel'.
OPENACC_PARALLEL_DMA(nomap)
OPENACC_PARALLEL_CLAUSE_AND_DMA(present)
OPENACC_PARALLEL_CLAUSE_AND_DMA(copy)
OPENACC_PARALLEL_CLAUSE(pcopy)
OPENACC_PARALLEL_CLAUSE(present_or_copy)
OPENACC_PARALLEL_CLAUSE_AND_DMA(copyin)
OPENACC_PARALLEL_CLAUSE(pcopyin)
OPENACC_PARALLEL_CLAUSE(present_or_copyin)
OPENACC_PARALLEL_CLAUSE_AND_DMA(copyout)
OPENACC_PARALLEL_CLAUSE(pcopyout)
OPENACC_PARALLEL_CLAUSE(present_or_copyout)
OPENACC_PARALLEL_CLAUSE_AND_DMA(create)
OPENACC_PARALLEL_CLAUSE(pcreate)
OPENACC_PARALLEL_CLAUSE(present_or_create)
OPENACC_PARALLEL_CLAUSE_AND_DMA(no_create)
OPENACC_PARALLEL_DSA(shared)
OPENACC_PARALLEL_CLAUSE_AND_DSA(reduction)
OPENACC_PARALLEL_CLAUSE_AND_DSA(private)
OPENACC_PARALLEL_CLAUSE_AND_DSA(firstprivate)
OPENACC_PARALLEL_CLAUSE(num_gangs)
OPENACC_PARALLEL_CLAUSE(num_workers)
OPENACC_PARALLEL_CLAUSE(vector_length)

// Explicit clauses and DAs allowed for OpenACC directive 'loop'.
OPENACC_LOOP_CLAUSE(seq)
OPENACC_LOOP_CLAUSE(independent)
OPENACC_LOOP_CLAUSE(auto)
OPENACC_LOOP_CLAUSE(gang)
OPENACC_LOOP_CLAUSE(worker)
OPENACC_LOOP_CLAUSE(vector)
OPENACC_LOOP_DSA(shared)
OPENACC_LOOP_CLAUSE_AND_DSA(private)
OPENACC_LOOP_CLAUSE_AND_DSA(reduction)
OPENACC_LOOP_CLAUSE(collapse)

// Explicit clauses allowed for OpenACC directive 'parallel loop'.  DAs are
// checked only for effective directives, so there's no need to list them here.
OPENACC_PARALLEL_LOOP_CLAUSE(present)
OPENACC_PARALLEL_LOOP_CLAUSE(copy)
OPENACC_PARALLEL_LOOP_CLAUSE(pcopy)
OPENACC_PARALLEL_LOOP_CLAUSE(present_or_copy)
OPENACC_PARALLEL_LOOP_CLAUSE(copyin)
OPENACC_PARALLEL_LOOP_CLAUSE(pcopyin)
OPENACC_PARALLEL_LOOP_CLAUSE(present_or_copyin)
OPENACC_PARALLEL_LOOP_CLAUSE(copyout)
OPENACC_PARALLEL_LOOP_CLAUSE(pcopyout)
OPENACC_PARALLEL_LOOP_CLAUSE(present_or_copyout)
OPENACC_PARALLEL_LOOP_CLAUSE(create)
OPENACC_PARALLEL_LOOP_CLAUSE(pcreate)
OPENACC_PARALLEL_LOOP_CLAUSE(present_or_create)
OPENACC_PARALLEL_LOOP_CLAUSE(no_create)
OPENACC_PARALLEL_LOOP_CLAUSE(private)
OPENACC_PARALLEL_LOOP_CLAUSE(firstprivate)
OPENACC_PARALLEL_LOOP_CLAUSE(reduction)
OPENACC_PARALLEL_LOOP_CLAUSE(num_gangs)
OPENACC_PARALLEL_LOOP_CLAUSE(num_workers)
OPENACC_PARALLEL_LOOP_CLAUSE(vector_length)
OPENACC_PARALLEL_LOOP_CLAUSE(seq)
OPENACC_PARALLEL_LOOP_CLAUSE(independent)
OPENACC_PARALLEL_LOOP_CLAUSE(auto)
OPENACC_PARALLEL_LOOP_CLAUSE(gang)
OPENACC_PARALLEL_LOOP_CLAUSE(worker)
OPENACC_PARALLEL_LOOP_CLAUSE(vector)
OPENACC_PARALLEL_LOOP_CLAUSE(collapse)

// Explicit clauses allowed for OpenACC directive 'atomic'.
OPENACC_ATOMIC_CLAUSE(read)
OPENACC_ATOMIC_CLAUSE(write)
OPENACC_ATOMIC_CLAUSE(update)
OPENACC_ATOMIC_CLAUSE(capture)
OPENACC_ATOMIC_CLAUSE(compare)

// Explicit clauses allowed for OpenACC directive 'routine'.
OPENACC_ROUTINE_CLAUSE(gang)
OPENACC_ROUTINE_CLAUSE(worker)
OPENACC_ROUTINE_CLAUSE(vector)
OPENACC_ROUTINE_CLAUSE(seq)

// Parent directives allowed for 'update'.
OPENACC_UPDATE_PARENT(unknown)
OPENACC_UPDATE_PARENT(data)

// Parent directives allowed for 'enter data'.
OPENACC_ENTER_DATA_PARENT(unknown)
OPENACC_ENTER_DATA_PARENT(data)

// Parent directives allowed for 'exit data'.
OPENACC_EXIT_DATA_PARENT(unknown)
OPENACC_EXIT_DATA_PARENT(data)

// Parent directives allowed for 'data'.
OPENACC_DATA_PARENT(unknown)
OPENACC_DATA_PARENT(data)

// The OpenACC 2.6 spec doesn't say that an acc parallel or acc parallel loop
// cannot be nested within another acc construct, but gcc 7.3.0 and pgcc
// 18.4-0 don't permit that for simple cases I've tried.

// Parent directives allowed for 'parallel'.
OPENACC_PARALLEL_PARENT(unknown)
OPENACC_PARALLEL_PARENT(data)

// Parent directives allowed for 'loop'.
OPENACC_LOOP_PARENT(unknown)
OPENACC_LOOP_PARENT(parallel)
OPENACC_LOOP_PARENT(loop)
OPENACC_LOOP_PARENT(parallel_loop)
OPENACC_LOOP_PARENT(routine)

// Parent directives allowed for 'parallel_loop'.
OPENACC_PARALLEL_LOOP_PARENT(unknown)
OPENACC_PARALLEL_LOOP_PARENT(data)

// Parent directives allowed for 'atomic'.
OPENACC_ATOMIC_PARENT(unknown)
OPENACC_ATOMIC_PARENT(data)
OPENACC_ATOMIC_PARENT(parallel)
OPENACC_ATOMIC_PARENT(loop)
OPENACC_ATOMIC_PARENT(parallel_loop)
OPENACC_ATOMIC_PARENT(routine)

// Parent directives allowed for 'routine'.
OPENACC_ROUTINE_PARENT(unknown)

#undef OPENACC_DIRECTIVE
#undef OPENACC_DIRECTIVE_EXT
#undef OPENACC_DMA
#undef OPENACC_DSA_MAPPABLE
#undef OPENACC_DSA_UNMAPPABLE
#undef OPENACC_CLAUSE
#undef OPENACC_CLAUSE_ALIAS
#undef OPENACC_CLAUSE_ALIAS_copy
#undef OPENACC_CLAUSE_ALIAS_copyin
#undef OPENACC_CLAUSE_ALIAS_copyout
#undef OPENACC_CLAUSE_ALIAS_create
#undef OPENACC_CLAUSE_ALIAS_self
#undef OPENACC_UPDATE_DMA
#undef OPENACC_UPDATE_DSA
#undef OPENACC_ENTER_DATA_DMA
#undef OPENACC_ENTER_DATA_DSA
#undef OPENACC_EXIT_DATA_DMA
#undef OPENACC_EXIT_DATA_DSA
#undef OPENACC_DATA_DMA
#undef OPENACC_DATA_DSA
#undef OPENACC_PARALLEL_DMA
#undef OPENACC_PARALLEL_DSA
#undef OPENACC_LOOP_DMA
#undef OPENACC_LOOP_DSA
#undef OPENACC_PARALLEL_LOOP_DMA
#undef OPENACC_PARALLEL_LOOP_DSA
#undef OPENACC_UPDATE_CLAUSE
#undef OPENACC_ENTER_DATA_CLAUSE
#undef OPENACC_EXIT_DATA_CLAUSE
#undef OPENACC_DATA_CLAUSE
#undef OPENACC_PARALLEL_CLAUSE
#undef OPENACC_LOOP_CLAUSE
#undef OPENACC_PARALLEL_LOOP_CLAUSE
#undef OPENACC_ATOMIC_CLAUSE
#undef OPENACC_ROUTINE_CLAUSE
#undef OPENACC_UPDATE_PARENT
#undef OPENACC_ENTER_DATA_PARENT
#undef OPENACC_EXIT_DATA_PARENT
#undef OPENACC_DATA_PARENT
#undef OPENACC_PARALLEL_PARENT
#undef OPENACC_LOOP_PARENT
#undef OPENACC_PARALLEL_LOOP_PARENT
#undef OPENACC_ATOMIC_PARENT
#undef OPENACC_ROUTINE_PARENT
#undef OPENACC_ALIASED_CLAUSE
#undef OPENACC_CLAUSE_AND_DMA
#undef OPENACC_CLAUSE_AND_DSA_MAPPABLE
#undef OPENACC_CLAUSE_AND_DSA_UNMAPPABLE
#undef OPENACC_DATA_CLAUSE_AND_DMA
#undef OPENACC_PARALLEL_CLAUSE_AND_DMA
#undef OPENACC_PARALLEL_CLAUSE_AND_DSA
#undef OPENACC_LOOP_CLAUSE_AND_DSA
