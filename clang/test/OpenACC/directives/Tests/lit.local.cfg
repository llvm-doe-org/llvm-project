#-------------------------------------------------------------------------------
# Overview of "clang/test/OpenACC/directives"
#
# See "../../README.md" for important documentation about the organization of
# this portion of Clang's OpenACC test suite.  See "../../lit.local.cfg" for the
# LIT configuration shared with the rest of Clang's OpenACC test suite.
#
# Within "clang/test/OpenACC/directives", all test appear in the "Tests"
# subdirectory.  That's actually configured for LIT as an excluded directory,
# but other subdirectories are symbolic links to "Tests" in order to effectively
# replicate every test as part of a different sub test suite:
#
# * "dump" runs checks from %{acc-check-dmp[-cxx]} substitutions.
# * "print" runs checks from %{acc-check-prt[-cxx]} substitutions.
# * "host" runs checks from %{acc-check-exe[-cxx]*} substitutions and selects no
#   device types for offload compilation.
# * Each architecture-specific sub test suite ("x86_64-pc-linux-gnu",
#   "nvptx64-nvidia-cuda", etc.) runs checks from %{acc-check-exe[-cxx]*}
#   substitutions and selects just the specified device type for offload
#   compilation.  All tests in the sub test suite are marked unsupported if that
#   device type is not available on the system.
# * The latter two are sometimes called "execution sub test suites" to indicate
#   they run checks from %{acc-check-exe[-cxx]*} substitutions.
#
# For each sub test suite, its name is added to the LIT features that can be
# used in REQUIRES, UNSUPPORTED, and XFAIL.
#
# LIT substitutions are documented where they are defined below.  Their
# expansions often depend on the sub test suite.  For example, each of the
# above sub test suites suppresses checks from the %{acc-check-*} substitutions
# associated with other sub test suites by adjusting their expansions.  To be
# clear, all "RUN:" directives execute as usual in LIT.  The only difference is
# how substitutions within them expand.
#
# %{acc-check-*} substitutions without "-cxx" in the name should be used only in
# test files that are C.  %{acc-check-*} substitutions with "-cxx" in the name
# should be used only in test files that are C++.
#...............................................................................
# FileCheck prefixes and components
#
# Many of the %{acc-check-*} substitutions execute FileCheck commands.
# FileCheck prefixes for these commands are built as follows:
# * Each %{acc-check-*} expansion has (see individual documentation below):
#   * A predefined FileCheck prefix base.  For example:
#
#       PRT
#
#   * A predefined sequence of FileCheck prefix component sets that are included
#     or excluded based on the check being run.  For example:
#
#       set 1: NOACC,A,AO,O,OA
#       set 2: AST,SRC
#
#   * A final set of FileCheck prefix components that can be specified by
#     redefining a "%{*:fc:pres}" substitution, which is the empty set by
#     default.  All of these components are always included.
# * The FileCheck prefixes used are built by appending components to the prefix
#   base, with "-" separating components, as follows:
#   * Always use the prefix base by itself as a prefix.  For example:
#
#       PRT
#
#   * To the prefix base, append every included prefix component from the first
#     set.  For example, if -fopenacc-print=omp-acc is being checked, then
#     NOACC, A, and AO are excluded, but O and OA are included, so the prefixes
#     should be:
#
#       PRT,PRT-O,PRT-OA
#
#   * To each of the prefixes built so far, append every included prefix
#     component from the second set.  For example, because
#     -fopenacc-print=omp-acc is being checked, AST should be excluded, but SRC
#     should be included, so the prefixes should be:
#
#       PRT,PRT-O,PRT-OA,PRT-SRC,PRT-O-SRC,PRT-OA-SRC
#
#   * And so on, in the order of the predefined sets, and concluding with the
#     set from a "%{*:fc:pres}".
# * The result is a set of FileCheck prefixes that can be used to identify
#   the combination of conditions under which a FileCheck directive should be
#   enabled.  For example:
#   * Use "PRT" if the FileCheck directive should always be enabled for this
#     %{acc-check-*} substitution's FileCheck commands.
#   * Use "PRT-OA" if the FileCheck directive should be enabled when checking
#     either -fopenacc-ast-print=omp-acc or -fopenacc-print=omp-acc.
#   * Use "PRT-OA-AST" if the FileCheck directive should be enabled only when
#     checking -fopenacc-ast-print=omp-acc.
#   * Notice that "PRT-AST-OA" is never included.  That is, prefix components
#     can be omitted from a prefix if they do not indicate desired conditions,
#     but they cannot be reordered.
#
# WARNING: Be conservative about adding new prefix components.  They can
# significantly increase test suite execution time.  See discussion of prefixes
# for %{acc-check-exe[-cxx][-no-s2s]} for more details.
#...............................................................................
# Preprocessor definitions (-D)
#
# All Clang commands expanded from all %{acc-check-*} substitutions in all sub
# test suites set each of the following preprocessor macros to 1 if the
# condition it indicates is true, and otherwise it leaves it undefined:
#
# * "TGT_HOST":
#   * Indicates compilation is only for host.
#   * This is true throughout the "dump", "print", and "host" sub test suites.
# * "TGT_" followed by the uppercase version of the omp_device_t spelling of an
#   architecture-specific device type:
#   * For example, "TGT_X86_64" or "TGT_NVPTX64".
#   * Indicates offload compilation for that device type.
#   * This is true throughout the associated architecture-specific sub test
#     suite.
# * "TGT_USE_STDIO":
#   * Indicates the device type selected for compilation supports stdio (e.g.,
#     "printf") in target regions.
#   * This is true throughout the "dump", "print", and "host" sub test suites.
#   * This is true in some architecture-specific sub test suites.
# * "EXE_S2S_AST_PRT":
#   * Indicates an execution sub test suite and either:
#     * Source-to-source mode with -fopenacc-ast-print=omp.
#     * OpenMP compilation after that.
#   * This case is not tested for offload compilation because
#     -fopenacc-ast-print is guaranteed to expand includes and macros
#     appropriately only for the host architecture.
# * "EXE_S2S_PRT":
#   * Indicates an execution sub test suite and either:
#     * Source-to-source mode with -fopenacc-print=omp.
#     * OpenMP compilation after that.
# * "EXE_TRAD":
#   * Indicates an execution sub test suite and traditional compilation.
#-------------------------------------------------------------------------------

from enum import Enum
import re
import subprocess
from OpenACCTestConfigHelpers import \
  addPrefixComponents, addPrefixComponentsFromMatch, tgtToOMP, \
  tgtSupportsStdio, tgtBcPathClangOpt

# Which subdirectory and thus sub test suite is this?
current_subdir = os.path.basename(os.path.dirname(__file__))
# Add that to the LIT available features.
config.available_features.add(current_subdir)

#-------------------------------------------------------------------------------
# Various helpers used to implement substitutions below.
#-------------------------------------------------------------------------------

# This substitution is used in %{acc-check-*} expansions to combine FileCheck
# prefix components from a %{*:fc:pres} with base FileCheck prefixes.  It is not
# intended to be used directly in tests.
#
# This is likely the only LIT configuration that specifies a function as a LIT
# substitution value.  We have to do it this way because we're not performing a
# replacement that simply inserts matched groups into fixed positions in other
# fixed text.  Instead, at substitution time, we have to compute the replacement
# from the matched groups using a more sophisticated algorithm.
#
# TODO: Because we're using a function in a LIT substitution value, this depends
# on a small LIT modification in the processLine function in the
# applySubstitutions function in llvm/utils/lit/lit/TestRunner.py to accept that
# function rather than trying to convert it to a string.  At the time of this
# writing, that had not yet been upstreamed.
config.substitutions.insert(0,
  ('<%pre>(?P<prefixes>(?:[^;])*); *(?P<component_set>[^;]*)</%pre>',
  addPrefixComponentsFromMatch))

# Common components of Clang command lines.
incs = ' -isystem ' + config.libacc2omp_dir + ' -isystem ' + config.libomp_dir
verify_noacc = ' -Xclang -verify=expected,noacc'
verify_acc = ' -Xclang -verify=expected,acc'
verify_omp = ' -Xclang -verify=expected,omp'
defs_no_tgt = ' -DTGT_HOST -DTGT_USE_STDIO'

# The OpenMP version required by the OpenACC implementation.
fopenmp_version = ' -fopenmp-version=51'

def substAccChecksForCAndCxx(acc_check_name, cmds, params=None):
  acc_check_name_c = acc_check_name.replace('%{-cxx}', '')
  acc_check_name_cxx = acc_check_name.replace('%{-cxx}', '-cxx')
  params_re = ''
  args_repl = ''
  if params:
      for param in params:
          if params_re:
              params_re += '%,'
              args_repl += '%, '
          # This is a slightly sloppier version of the lit's regex for
          # function-like substitutions.  FIXME: Lit should be extended so that
          # lit configuration files can reuse the implementation of
          # DEFINE/REDEFINE for defining function-like substitutions.
          params_re += '\s*(?!\s)'
          params_re += '(?P<' + param + '>('
          params_re +=   '?:'
          params_re +=     '(?:[^%]|%[^,)])+'
          params_re +=     '(?<!\s)'
          params_re +=   ')?'
          params_re += ')'
          params_re += '\s*'
          args_repl += r'\g<' + param + '>'
      params_re = '\(' + params_re + '%\)'
      args_repl = '(' + args_repl + '%)'
  # In the value, the leading '%' in acc_check_name and acc_check_name_cxx must
  # be escaped so we don't end up with an infinitely recursive expansion.
  config.substitutions.insert(0,
    (acc_check_name_c + params_re,
     cmds \
       .replace('%{acc-check-name}',
                acc_check_name_c.replace('%', '%%') + args_repl) \
       .replace('%{clang}', '%clang') \
       .replace('%{c-or-cpp}', 'c')))
  config.substitutions.insert(0,
    (acc_check_name_cxx + params_re,
     cmds \
       .replace('%{acc-check-name}',
                acc_check_name_cxx.replace('%', '%%') + args_repl) \
       .replace('%{clang}', '%clangxx -Wno-openacc-and-cxx') \
       .replace('%{c-or-cpp}', 'cpp')))

#-------------------------------------------------------------------------------
# %if-tgt-COND<TRUE|FALSE>
# %if-exe-COND
#
# These substitutions are always defined, including in the "dump" and "print"
# sub test suites, but their expansions depend on the current sub test suite.
#
# COND values:
# * "host" indicates compilation only for host.
# * The omp_device_t spelling of an architecture-specific device type (e.g.,
#   "x86_64" or "nvptx64") indicates offload compilation only for that device
#   type.
#
# Behavior of %if-tgt-COND<TRUE|FALSE>:
# * Expands to TRUE if the condition indicated by COND is true, and expands to
#   FALSE otherwise.
# * COND="host" is true throughout the "dump", "print", and "host" sub test
#   suites.  Otherwise, COND is true throughout the architecture-specific sub
#   test suite it indicates.  COND is false otherwise.
# * TRUE and FALSE cannot include any character in the set "<>|".  As a
#   result, these substitutions cannot appear in each other's arguments.
# * Either TRUE or FALSE can be the empty string.
# * "|" cannot be omitted even if FALSE is the empty string.  Otherwise, it's
#   too easy to read any comma within TRUE as the delimiter.
# * These substitutions are designed to avoid syntactic ambiguity when TRUE or
#   FALSE contains commas (e.g., for delimiting FileCheck prefix components).
#
# Behavior of %if-exe-COND:
# * This should be placed in front of any command line in a "RUN:" directive if
#   that command line should run only when the current sub test suite is the
#   exact execution ("exe") sub test suite indicated by COND.
# * The command line will thus always be skipped in "dump" and "print" sub test
#   suites.
# * The command line should not contain pipes as it will be placed in the
#   argument list of a ":" when it should be skipped.
# * A comment indicating whether the command is being run or skipped is
#   prepended to the command line using ":".
#
# If COND is not defined or any other syntax rules are not obeyed, LIT usually
# doesn't recognize the substitution and so doesn't expand it.  Usually the
# result is a shell error.
#-------------------------------------------------------------------------------

for tgt in list(config.tgt_to_ndevs):
    tgt_omp = tgtToOMP(tgt)
    tgt_cond = "tgt-" + tgt_omp
    exe_cond = "exe-" + tgt_omp
    exe_cond_val = current_subdir == tgt
    tgt_cond_val = exe_cond_val or \
      tgt == "host" and (current_subdir == 'dump' or current_subdir == 'print')
    config.substitutions.append(('%if-' + tgt_cond + '<([^<>|]*)\|([^<>|]*)>',
                                 '\\1' if tgt_cond_val else '\\2'))
    config.substitutions.append(('%if-' + exe_cond,
      ': "Running: ' + exe_cond + ' check" &&\n' if exe_cond_val else \
      ': "Skipping: ' + exe_cond + ' check:" '))

#-------------------------------------------------------------------------------
# Parameter substitutions.
#
# These sustitutions act as parameters to %{acc-check-*} substitutions and can
# be redefined per test file.  They are documented below with the
# %{acc-check-*} substitutions they affect.
#-------------------------------------------------------------------------------

config.substitutions.insert(0, ('%{all:clang:args-stable}', ''))
config.substitutions.insert(0, ('%{all:clang:args}', ''))
config.substitutions.insert(0, ('%{all:fc:pres}', ''))
config.substitutions.insert(0, ('%{all:fc:args-stable}', ''))
config.substitutions.insert(0, ('%{all:fc:args}', ''))

config.substitutions.insert(0, ('%{dmp:clang:args}', ''))
config.substitutions.insert(0, ('%{dmp:fc:pres}', '%{all:fc:pres}'))
config.substitutions.insert(0, ('%{dmp:fc:args-stable}', ''))
config.substitutions.insert(0, ('%{dmp:fc:args}', ''))

config.substitutions.insert(0, ('%{prt:clang:args}', ''))
config.substitutions.insert(0, ('%{prt:fc:pres}', '%{all:fc:pres}'))
config.substitutions.insert(0, ('%{prt:fc:args-stable}', ''))
config.substitutions.insert(0, ('%{prt:fc:args}', ''))

config.substitutions.insert(0, ('%{exe:clang:args}', ''))
config.substitutions.insert(0, ('%{exe:fc:pres}', '%{all:fc:pres}'))
config.substitutions.insert(0, ('%{exe:fc:args-stable}', ''))
config.substitutions.insert(0, ('%{exe:fc:args}', ''))

config.substitutions.insert(0, ('%{exe:base-name}', ''))
config.substitutions.insert(0, ('%{exe:args}', ''))
config.substitutions.insert(0, ('%{exe:cmd-start}', ''))

#-------------------------------------------------------------------------------
# %{acc-check-dmp[-cxx]}
# %{acc-check-dmp[-cxx]-fn}( CLANG_ARGS %, FC_PRES %)
#
# Check AST dumps before and after AST serialization.
#
# The following sustitutions act as parameters and can be redefined per test:
# * %{all:clang:args-stable}, %{all:clang:args}, and %{dmp:clang:args}:
#   Additional command-line arguments to pass to all Clang commands.  Use the
#   first for arguments that are rarely changed within the test file, and use
#   the others for those that change frequently.
# * %{dmp:fc:pres}: A comma-separated list of FileCheck prefix components.  The
#   default value is %{all:fc:pres}, whose default is the empty list.
# * %{all:fc:args-stable}, %{dmp:fc:args-stable}, %{all:fc:args}, and
#   %{dmp:fc:args}: Additional command-line arguments to pass to all FileCheck
#   commands.  Use the first two for arguments that are rarely changed within
#   the test file, and use the last two for those that change frequently.
#
# %{acc-check-dmp[-cxx]-fn}( CLANG_ARGS %, FC_PRES %) are the same as
# %{acc-check-dmp[-cxx]} except:
# * %{dmp:clang:args} is ignored, and CLANG_ARGS is used in its place.
# * %{dmp:fc:pres} is ignored, and FC_PRES is used in its place.
# * CLANG_ARGS and FC_PRES must not contain '%,' or '%)'.  Otherwise, the
#   substitution will either fail to be expanded or will not include all of its
#   intended arguments.
#
# FileCheck prefixes are as follows:
# * The prefix base is "DMP".
# * There is one predefined set of prefix components:
#     * "SRC": Dumping happens immediately after parsing the source.
#     * "AST": Dumping happens after serializing and deserializing the AST.
# * See the generic %{acc-check-*} documentation at the beginning of this file
#   for details on how FileCheck prefixes are built.
#-------------------------------------------------------------------------------

if current_subdir == 'dump':
    fc_prefixes = ['DMP', 'DMP-SRC']
    dmp_cmds = ': "Running: %{acc-check-name}"'
    # Check before AST serialization.
    dmp_cmds += ' &&\n: "Checking: -ast-dump"'
    dmp_cmds += \
      ' &&\n%{clang} -fopenacc -Xclang -ast-dump -fsyntax-only' + \
      defs_no_tgt + incs + verify_acc + ' %{all:clang:args-stable} ' \
      '%{all:clang:args} %{dmp:clang:args} %s > %t.dmp'
    dmp_cmds += \
      ' &&\nFileCheck -input-file=%t.dmp -check-prefixes=<%pre>' + \
      ','.join(fc_prefixes) + '; %{dmp:fc:pres}</%pre> ' + \
      '%{all:fc:args-stable} %{dmp:fc:args-stable} %{all:fc:args} ' + \
      '%{dmp:fc:args} %s'
    # Check after AST serialization.
    fc_prefixes = ['DMP', 'DMP-AST']
    dmp_cmds += ' &&\n: "Checking: -ast-dump after -emit-ast"'
    dmp_cmds += \
      ' &&\n%{clang} -fopenacc -emit-ast' + defs_no_tgt + incs + \
      verify_acc + ' %{all:clang:args-stable} %{all:clang:args} ' \
      '%{dmp:clang:args} -o %t.ast %s'
    dmp_cmds += ' &&\n%clang_cc1 -ast-dump-all %t.ast > %t.ast.dmp'
    dmp_cmds += \
      ' &&\nFileCheck -input-file=%t.ast.dmp -check-prefixes=<%pre>' + \
      ','.join(fc_prefixes) + '; %{dmp:fc:pres}</%pre> ' + \
      '%{all:fc:args-stable} %{dmp:fc:args-stable} %{all:fc:args} ' + \
      '%{dmp:fc:args} %s'
else:
    dmp_cmds = ': "Skipping: %{acc-check-name}"'
substAccChecksForCAndCxx('%{acc-check-dmp%{-cxx}}', dmp_cmds)
substAccChecksForCAndCxx(
  '%{acc-check-dmp%{-cxx}-fn}',
  dmp_cmds.replace('%{dmp:clang:args}', '\\g<clang_args>')
          .replace('%{dmp:fc:pres}', '\\g<fc_pres>'),
  params=['clang_args', 'fc_pres'])

#-------------------------------------------------------------------------------
# %{acc-check-prt[-cxx]}
# %{acc-check-prt[-cxx]-fn}( CLANG_ARGS %, FC_PRES %)
#
# Check -ast-print (with OpenACC disabled and enabled) and
# -fopenacc[-ast]-print (with every possible argument).
#
# Check before and after AST serialization.  Some data related to printing
# (where to print comments about discarded directives) is serialized and
# deserialized, so it's worthwhile to try all OpenACC printing modes.
#
# "//"-style comments and blank lines are stripped before checking
# -fopenacc[-ast]-print to make FileCheck directives easier to write for
# -fopenacc-print.  "/*...*/"-style comments are not stripped and should be used
# for Clang -verify directives.
#
# -Wno-openacc-omp-ext is always specified to suppress all warnings about the
# use of OpenMP extensions in the translations.  Checks that those warnings are
# working correctly appear in clang/test/OpenACC/diagnostics instead.
#
# The following sustitutions act as parameters and can be redefined per test:
# * %{all:clang:args-stable}, %{all:clang:args}, and %{prt:clang:args}:
#   Additional command-line arguments to pass to all Clang commands.  Use the
#   first for arguments that are rarely changed within the test file, and use
#   the others for those that change frequently.
# * %{prt:fc:pres}: A comma-separated list of FileCheck prefix components.  The
#   default value is %{all:fc:pres}, whose default is the empty list.
# * %{all:fc:args-stable}, %{prt:fc:args-stable}, %{all:fc:args}, and
#   %{prt:fc:args}: Additional command-line arguments to pass to all FileCheck
#   commands.  Use the first two for arguments that are rarely changed within
#   the test file, and use the last two for those that change frequently.
#
# %{acc-check-prt[-cxx]-fn}( CLANG_ARGS %, FC_PRES %) are the same as
# %{acc-check-prt[-cxx]} except:
# * %{prt:clang:args} is ignored, and CLANG_ARGS is used in its place.
# * %{prt:fc:pres} is ignored, and FC_PRES is used in its place.
# * CLANG_ARGS and FC_PRES must not contain '%,' or '%)'.  Otherwise, the
#   substitution will either fail to be expanded or will not include all of its
#   intended arguments.
#
# FileCheck prefixes are as follows:
# * The prefix base is "PRT".
# * The predefined sets of prefix components are, in order:
#   * A set describing which directives are included in the print:
#     * "NOACC": OpenACC is disabled.
#     * "A": Printing is specified by either:
#       * -ast-print with OpenACC enabled.
#       * -fopenacc[-ast]-print=acc[-omp].
#     * "AO": Printing is specified by -fopenacc[-ast]-print=acc-omp.
#     * "O": Printing is specified by -fopenacc[-ast]-print=omp-[acc].
#     * "OA": Printing is specified by -fopenacc[-ast]-print=omp-acc.
#     * It follows that:
#       * If "AO" is included, "A" is also included.
#       * If "OA" is included, "O" is also included.
#       * Given the subsets {"NOACC"}, {"A", "AO"}, and {"O", "OA"}, if a member
#         of one subset is included, no member of any other subset is included.
#   * A set describing the mode of printing:
#     * "AST": Printing is specified by either -ast-print or
#       -fopenacc-ast-print.
#     * "SRC": Printing is specified by -fopenacc-print.
# * See the generic %{acc-check-*} documentation at the beginning of this
#   file for details on how FileCheck prefixes are built.
#-------------------------------------------------------------------------------

class PrtTypeProps:
    def __init__(self, clang_args, verify, fc_pre_sets):
        self.clang_args = clang_args
        self.verify = verify
        self.fc_pre_sets = fc_pre_sets

class PrtType(Enum):
    AstPrtNoAcc = PrtTypeProps(
      clang_args='-Xclang -ast-print -fsyntax-only',
      verify=verify_noacc,
      fc_pre_sets=[['NOACC'], ['AST']])
    AstPrtAcc = PrtTypeProps(
      clang_args='-Xclang -ast-print -fsyntax-only -fopenacc',
      verify=verify_acc,
      fc_pre_sets=[['A'], ['AST']])
    AccAstPrtAcc = PrtTypeProps(
      clang_args='-fopenacc-ast-print=acc',
      verify=verify_acc,
      fc_pre_sets=[['A'], ['AST']])
    AccAstPrtOmp = PrtTypeProps(
      clang_args='-fopenacc-ast-print=omp',
      verify=verify_acc,
      fc_pre_sets=[['O'], ['AST']])
    AccAstPrtAccOmp = PrtTypeProps(
      clang_args='-fopenacc-ast-print=acc-omp',
      verify=verify_acc,
      fc_pre_sets=[['A', 'AO'], ['AST']])
    AccAstPrtOmpAcc = PrtTypeProps(
      clang_args='-fopenacc-ast-print=omp-acc',
      verify=verify_acc,
      fc_pre_sets=[['O', 'OA'], ['AST']])
    AccPrtAcc = PrtTypeProps(
      clang_args='-fopenacc-print=acc',
      verify=verify_acc,
      fc_pre_sets=[['A'], ['SRC']])
    AccPrtOmp = PrtTypeProps(
      clang_args='-fopenacc-print=omp',
      verify=verify_acc,
      fc_pre_sets=[['O'], ['SRC']])
    AccPrtAccOmp = PrtTypeProps(
      clang_args='-fopenacc-print=acc-omp',
      verify=verify_acc,
      fc_pre_sets=[['A', 'AO'], ['SRC']])
    AccPrtOmpAcc = PrtTypeProps(
      clang_args='-fopenacc-print=omp-acc',
      verify=verify_acc,
      fc_pre_sets=[['O', 'OA'], ['SRC']])
    def prt_cmd(self, args):
        sp_args = (' ' if args else '') + args
        return '%{clang} ' + self.value.clang_args + incs + \
          self.value.verify + ' -Wno-openacc-omp-ext' + sp_args
    def filecheck_cmd(self, args, prefix_components):
        fc_prefixes = addPrefixComponents(['PRT'], self.value.fc_pre_sets)
        return 'FileCheck -check-prefixes=<%pre>' + \
          ','.join(fc_prefixes) + '; ' + prefix_components + '</%pre> ' + args

if current_subdir == 'print':
    prt_cmds = ': "Running: %{acc-check-name}"'
    # Check -ast-print with OpenACC disabled.
    prt_cmds += ' &&\n: "Checking: -ast-print without -fopenacc"'
    prt_cmds += \
      ' &&\n' + \
      PrtType.AstPrtNoAcc.prt_cmd(defs_no_tgt + ' %{all:clang:args-stable} '
                                  '%{all:clang:args} %{prt:clang:args}') + \
      ' %s > %t.prt'
    prt_cmds += \
      ' &&\n' + \
      PrtType.AstPrtNoAcc.filecheck_cmd(
        '%{all:fc:args-stable} %{prt:fc:args-stable} %{all:fc:args} ' + \
        '%{prt:fc:args}',
        '%{prt:fc:pres}') + \
      ' -input-file=%t.prt %s'
    # Strip comments and blank lines so checking -fopenacc-print output is
    # easier
    prt_cmds += \
      ' &&\n: "Checking: Stripping source to make printing checks easier"'
    prt_cmds += \
      ' &&\ngrep -v \'^ *\(//.*\)\?$\' %s | sed \'s,//.*,,\'' + \
      ' > %t-acc.%{c-or-cpp}'
    # Check various ways of printing OpenACC and its OpenMP translation.
    for prt_type in PrtType:
        if prt_type == PrtType.AstPrtNoAcc:
            continue # checked that above already
        prt_cmds += ' &&\n: "Checking: ' + prt_type.value.clang_args + '"'
        prt_cmds += \
          ' &&\n' + \
          prt_type.prt_cmd(defs_no_tgt + ' %{all:clang:args-stable} '
                           '%{all:clang:args} %{prt:clang:args}') + \
          ' %t-acc.%{c-or-cpp} > %t.prt'
        prt_cmds += \
          ' &&\n' + \
          prt_type.filecheck_cmd(
            '%{all:fc:args-stable} %{prt:fc:args-stable} %{all:fc:args} ' + \
            '%{prt:fc:args}',
            '%{prt:fc:pres}') + \
          ' -input-file=%t.prt %s'
    # Check -ast-print after AST serialization.
    prt_cmds += ' &&\n: "Checking: -emit-ast before various forms of printing"'
    prt_cmds += \
      ' &&\n%{clang} -fopenacc -emit-ast ' + defs_no_tgt + incs + \
      verify_acc + ' %{all:clang:args-stable} %{all:clang:args} ' \
      '%{prt:clang:args} -o %t.ast %t-acc.%{c-or-cpp}'
    for prt_type in PrtType:
        if prt_type == PrtType.AstPrtNoAcc:
            continue
        prt_cmds += \
          ' &&\n: "Checking: ' + prt_type.value.clang_args + ' after -emit-ast"'
        prt_cmds += \
          ' &&\n' + \
          prt_type.prt_cmd(defs_no_tgt + ' %{all:clang:args-stable} '
                           '%{all:clang:args} %{prt:clang:args}') + \
          ' %t.ast > %t.prt'
        prt_cmds += \
          ' &&\n' + \
          prt_type.filecheck_cmd(
            '%{all:fc:args-stable} %{prt:fc:args-stable} %{all:fc:args} ' + \
            '%{prt:fc:args}',
            '%{prt:fc:pres}') + \
          ' -input-file=%t.prt %s'
else:
    prt_cmds = ': "Skipping: %{acc-check-name}"'
substAccChecksForCAndCxx('%{acc-check-prt%{-cxx}}', prt_cmds)
substAccChecksForCAndCxx(
  '%{acc-check-prt%{-cxx}-fn}',
  prt_cmds.replace('%{prt:clang:args}', '\\g<clang_args>')
          .replace('%{prt:fc:pres}', '\\g<fc_pres>'),
  params=['clang_args', 'fc_pres'])

#-------------------------------------------------------------------------------
# %{acc-check-exe[-cxx][-no-s2s]}
# %{acc-check-exe[-cxx][-no-s2s]-fn}( CLANG_ARGS %, FC_PRES %)
#
# Check execution with various compilation types and various offload
# configurations.  FileCheck is used to examine the combination of stdout and
# stderr from the application.  %{acc-check-exe[-cxx]} is the same as
# %{acc-check-exe[-cxx]-no-s2s} except that the latter does not check
# source-to-source compilation.
#
# The following sustitutions act as parameters and can be redefined per test:
# * %{all:clang:args-stable}, %{all:clang:args}, and %{exe:clang:args}:
#   Additional command-line arguments to pass to all Clang commands.  Use the
#   first for arguments that are rarely changed within the test file, and use
#   the others for those that change frequently.
# * %{exe:args}: Command-line arguments to pass to the compiled application.
# * %{exe:fc:pres}: A comma-separated list of FileCheck prefix components.  The
#   default value is %{all:fc:pres}, whose default is the empty list.
# * %{all:fc:args-stable}, %{exe:fc:args-stable}, %{all:fc:args}, and
#   %{exe:fc:args}: Additional command-line arguments to pass to all FileCheck
#   commands.  Use the first two for arguments that are rarely changed within
#   the test file, and use the last two for those that change frequently.
# * %{exe:cmd-start}: Code to insert before every shell command.  For example,
#   it might be ":" to suppress all commands (no pipes are used in commands so
#   that this works correctly).
#
# %{acc-check-exe[-cxx]-fn}( CLANG_ARGS %, FC_PRES %) are the same as
# %{acc-check-exe[-cxx]} except:
# * %{exe:clang:args} is ignored, and CLANG_ARGS is used in its place.
# * %{exe:fc:pres} is ignored, and FC_PRES is used in its place.
# * CLANG_ARGS and FC_PRES must not contain '%,' or '%)'.  Otherwise, the
#   substitution will either fail to be expanded or will not include all of its
#   intended arguments.
#
# FileCheck prefixes are as follows:
# * The prefix base is "EXE".
# * There is one predefined set of prefix components: a set describing the
#   offload compilation configuration:
#   * "HOST": Offloading is disabled.
#   * "OFF": Offloading is enabled for some device type.
#   * "TGT-" followed by the uppercase version of the omp_device_t spelling of
#     an architecture-specific device type: Offloading is enabled for that
#     device type.
#   * "TGT-USE-STDIO": Target regions support stdio.  Always included if "HOST"
#     is included.
#   * "OFF-TGT-USE-STDIO": Included if "OFF" and "TGT-USE-STDIO" are included.
#     To reduce the number of FileCheck prefixes, TGT-USE-STDIO is never
#     combined with "HOST" or an architecture-specific "TGT-" prefix component.
#     Those are sufficient to determine whether target regions support stdio,
#     but "OFF-TGT-USE-STDIO" permits being more general.
# * WARNING: Be conservative about adding new prefix components.  They can
#   significantly increase test suite execution time.  For this reason, we do
#   not have "TGT-NOT-<ARCH>" prefixes.  One day hopefully FileCheck will
#   support directives like "CHECK-IF(!COND1 && !COND2):" so that the
#   inefficiency and complexity of prefix combinations and component negations
#   will no longer be necessary.
# * See the generic %{acc-check-*} documentation at the beginning of this file
#   for details on how FileCheck prefixes are built.
#...............................................................................
# %{acc-check-exe[-cxx][-no-s2s]-compile}
# %{acc-check-exe[-cxx][-no-s2s]-run}
# %{acc-check-exe[-cxx][-no-s2s]-filecheck}
#
# %{acc-check-exe[-cxx][-no-s2s]-run-fn}( CMD_START %, ARGS %)
# %{acc-check-exe[-cxx][-no-s2s]-filecheck-fn}( PRES %)
#
# These substitutions enable decomposing %{acc-check-exe[-cxx][-no-s2s]} into
# their stages of compiling, running, and checking output with FileCheck.  For
# example, this can permit compiling once and then running and checking output
# multiple times with varying command-line arguments.  It can also permit using
# the "%{exe:cmd-start}" substitution to insert "not" in front of only the
# application execution.
#
# %{acc-check-exe[-cxx]-compile} compile using all compile types.
# %{acc-check-exe[-cxx]-no-s2s-compile} compile using traditional compilation
# mode only.  In either case, the following sustitutions act as parameters and
# can be redefined per test:
# * %{all:clang:args-stable}, %{all:clang:args}, and %{exe:clang:args}:
#   Additional command-line arguments to pass to all Clang commands.  Use the
#   first for arguments that are rarely changed within the test file, and use
#   the others for those that change frequently.
# * %{exe:cmd-start}: Code to insert before every shell command.
#
# %{acc-check-exe[-cxx][-no-s2s]-run} run the application for all compile
# types produced by %{acc-check-exe[-cxx][-no-s2s]-compile}, respectively.
# The following sustitutions act as parameters and can be redefined per test:
# * %{exe:args}: Command-line arguments to pass to the compiled application.
# * %{exe:cmd-start}: Code to insert before every shell command.
#
# %{acc-check-exe[-cxx][-no-s2s]-run-fn}(CMD_START %, ARGS %) are the same as
# %{acc-check-exe[-cxx][-no-s2s]-run} except:
# * %{exe:args} and %{exe:cmd-start} are ignored.
# * CMD_START and ARGS are used in their place.
# * CMD_START and ARGS must not contain '%,' or '%)'.  Otherwise, the
#   substitution will either fail to be expanded or will not include all of its
#   intended arguments.
#
# %{acc-check-exe[-cxx][-no-s2s]-filecheck} uses FileCheck to verify the output
# from every run produced by %{acc-check-exe[-cxx][-no-s2s]-run}, respectively.
# The following sustitutions act as parameters and can be redefined per test:
# * %{exe:fc:pres}: A comma-separated list of FileCheck prefix components.
# * %{all:fc:args-stable}, %{exe:fc:args-stable}, %{all:fc:args}, and
#   %{exe:fc:args}: Additional command-line arguments to pass to all FileCheck
#   commands.  Use the first two for arguments that are rarely changed within
#   the test file, and use the last two for those that change frequently.
# * %{exe:cmd-start}: Code to insert before every shell command.
#
# %{acc-check-exe[-cxx]-filecheck-fn}( FC_PRES %) are the same as
# %{acc-check-exe[-cxx]-filecheck} except:
# * %{exe:fc:pres} is ignored, and FC_PRES is used in its place.
# * FC_PRES must not contain '%,' or '%)'.  Otherwise, the substitution will
#   either fail to be expanded or will not include all of its intended
#   arguments.
#
# FileCheck prefixes are as defined for %{acc-check-exe[-cxx][-no-s2s]}.
#...............................................................................
# %{acc-check-exe[-cxx][-no-s2s]-compile-c}
# %{acc-check-exe[-cxx][-no-s2s]-link}
#
# These substitutions enable decomposing %{acc-check-exe[-cxx][-no-s2s]-compile}
# into their compiling and linking stages.  For example, this can permit
# compiling and linking multiple compilation units into the same executable.
#
# For %{acc-check-exe[-cxx][-no-s2s]-compile-c}, the following sustitutions act
# as parameters and can be redefined per test:
# * %{exe:base-name}: The base name to use for this compilation unit.  Most
#   importantly, if the value is "foo", the object file name will be "foo.o".
#   The working directory is changed for each compilation type, so "foo.o" will
#   always resolve to the desired object file for every compilation type when it
#   is checked.
# * %{all:clang:args-stable}, %{all:clang:args}, and %{exe:clang:args}:
#   Additional command-line arguments to pass to all Clang commands.  Use the
#   first for arguments that are rarely changed within the test file, and use
#   the others for those that change frequently.
# * %{exe:cmd-start}: Code to insert before every shell command.
#
# For %{acc-check-exe[-cxx][-no-s2s]-link}, the following sustitutions act as
# parameters and can be redefined per test:
# * %{all:clang:args-stable}, %{all:clang:args}, and %{exe:clang:args}:
#   Additional command-line arguments to pass to all Clang commands.  This must
#   include at least a series of object files.  Use the first for arguments that
#   are rarely changed within the test file, and use the others for those that
#   change frequently.
# * %{exe:cmd-start}: Code to insert before every shell command.
#-------------------------------------------------------------------------------

if current_subdir in list(config.tgt_to_ndevs):
    current_tgt = current_subdir

    # Mark the current subdirectory as unsupported if it's a target triple for a
    # device type that's unavailable on the current system.
    if current_tgt != 'host':
        config.unsupported = config.tgt_to_ndevs[current_tgt] == 0

    # Common components of Clang command lines.
    verify_acc_tgts = verify_acc
    verify_omp_tgts = verify_omp
    if current_tgt == 'host':
        fopenmp_targets = ''
    else:
        fopenmp_targets = ' -fopenmp-targets=' + current_tgt
        verify_acc_tgts += ',' + tgtToOMP(current_tgt)
        verify_omp_tgts += ',' + tgtToOMP(current_tgt)
    libs_acc = ' -lacc2omp'
    libs_bc = tgtBcPathClangOpt(current_tgt, config.libomptarget_dir)
    if libs_bc:
        libs_bc = ' ' + libs_bc
    # For some Linux platforms, -latomic is required for OpenMP support for
    # reductions on complex types.
    libs_other = ''
    if config.has_libatomic:
        libs_other += ' -latomic'

    def filecheck_cmd(input_file):
        tgt_pres = []
        tgt_pres.append('HOST' if current_tgt == 'host' else 'OFF')
        if current_tgt != 'host':
            tgt_pres.append('TGT-' + tgtToOMP(current_tgt).upper())
        if tgtSupportsStdio(current_tgt):
            tgt_use_stdio = 'TGT-USE-STDIO'
            tgt_pres.append(tgt_use_stdio)
            if current_tgt != 'host':
                tgt_pres.append('OFF-' + tgt_use_stdio)
        fc_prefixes = addPrefixComponents(['EXE'], [tgt_pres])
        return '%{exe:cmd-start} FileCheck -input-file ' + input_file + \
          ' -check-prefixes=<%pre>' + ','.join(fc_prefixes) + \
          '; %{exe:fc:pres}</%pre> %{exe:fc:args-stable} ' + \
          '%{exe:fc:args-stable} %{all:fc:args} %{exe:fc:args} %s'

    exe_start = ': "Running: '

    # Can we print the OpenMP source code, compile, and run it successfully?
    #
    # -fopenacc-ast-print is guaranteed to expand includes and macros
    # appropriately only for the host architecture, so don't try to use it for
    # offload compilation.  Do try it for the host as it's a good way to catch
    # AST printing issues.  In that case, don't bother with -verify when
    # compiling the generated OpenMP because printing the AST loses all comments
    # and thus all -verify directives.  Thus, we won't catch any unexpected
    # warnings, but we'll still catch errors.  Also, drop -Wunused-function
    # errors, which were suppressed when Clang knew they were from system
    # headers but are not suppressed now.
    #
    # Checking this for offloading is especially important when checking DMAs
    # or the update directive because they have no effect when not offloading
    # (that is, for shared memory).  Moreover, in some such cases, one of the
    # main issues to test is the various ways of translating so they can be used
    # in source-to-source mode when targeting other compilers.  That is, we want
    # to be sure source-to-source mode produces working translations.
    exe_s2s_compile_template = ''
    exe_s2s_link = ''
    exe_s2s_run = ''
    exe_s2s_filecheck = ''
    defs_tgt = ' -DTGT_' + tgtToOMP(current_tgt).upper()
    if tgtSupportsStdio(current_tgt):
      defs_tgt += ' -DTGT_USE_STDIO'
    for prt_type in [PrtType.AccAstPrtOmp, PrtType.AccPrtOmp]:
        if prt_type == PrtType.AccAstPrtOmp:
            if current_tgt != 'host':
                continue
            subdir = '%t-s2s-ast-prt'
            defs_exe = ' -DEXE_S2S_AST_PRT'
        else:
            assert(prt_type == PrtType.AccPrtOmp)
            subdir = '%t-s2s-prt'
            defs_exe = ' -DEXE_S2S_PRT'
        # exe_s2s_compile_template
        exe_s2s_compile_template += \
          ' &&\n: "Checking: Source-to-source compile for ' + \
          '\'%{exe:base-name}\' with ' + prt_type.value.clang_args + '"'
        exe_s2s_compile_template += \
          ' &&\nmkdir -p ' + subdir + ' && cd ' + subdir
        exe_s2s_compile_template += \
          ' &&\n%{exe:cmd-start} ' + \
          prt_type.prt_cmd(defs_tgt + defs_exe + ' %{all:clang:args-stable} '
                           '%{all:clang:args} %{exe:clang:args}') + \
          ' %s > %{exe:base-name}-omp.%{c-or-cpp}'
        exe_s2s_compile_template += \
          ' &&\n%{exe:cmd-start} %{clang} -fopenmp ' + fopenmp_version + \
          fopenmp_targets + defs_tgt + defs_exe + incs + \
          (verify_omp_tgts if prt_type == PrtType.AccPrtOmp else
           ' -Wno-unused-function') + \
          libs_acc + libs_bc + libs_other + \
          ' %{all:clang:args-stable} %{all:clang:args} %{exe:clang:args} ' \
          '%{exe:base-name}-omp.%{c-or-cpp}'
        exe_s2s_compile_template += ' &&\ncd ..'
        # exe_s2s_link
        exe_s2s_link += \
          ' &&\n: "Checking: Linking after source-to-source compile with ' + \
          prt_type.value.clang_args + '"'
        exe_s2s_link += ' &&\ncd ' + subdir
        exe_s2s_link += \
          ' &&\n%{exe:cmd-start} %{clang} -fopenmp ' + fopenmp_version + \
          fopenmp_targets + libs_acc + libs_bc + libs_other + \
          ' %{all:clang:args-stable} %{all:clang:args} %{exe:clang:args} ' \
          '-o main.exe'
        exe_s2s_link += ' &&\ncd ..'
        # exe_s2s_run
        exe_s2s_run += \
          ' &&\n: "Checking: Run after source-to-source compile with ' + \
          prt_type.value.clang_args + '"'
        exe_s2s_run += ' &&\ncd ' + subdir
        exe_s2s_run += \
          ' &&\n%{exe:cmd-start} ./main.exe %{exe:args} > main.out 2>&1'
        exe_s2s_run += ' &&\ncd ..'
        # exe_s2s_filecheck
        exe_s2s_filecheck += \
          ' &&\n: "Checking: Run output with File""Check after ' + \
          'source-to-source compile with ' + prt_type.value.clang_args + '"'
        exe_s2s_filecheck += ' &&\ncd ' + subdir
        exe_s2s_filecheck += \
          ' &&\n' + filecheck_cmd('main.out')
        exe_s2s_filecheck += ' &&\ncd ..'

    # Check execution after traditional compilation.
    subdir = '%t-trad'
    defs_exe = ' -DEXE_TRAD'
    # exe_trad_compile_template
    exe_trad_compile_template = \
      ' &&\n: "Checking: Traditional compile for \'%{exe:base-name}\'"'
    exe_trad_compile_template += ' &&\nmkdir -p ' + subdir + ' && cd ' + subdir
    exe_trad_compile_template += \
      ' &&\n%{exe:cmd-start} %{clang} -fopenacc' + fopenmp_targets + \
      defs_tgt + defs_exe + incs + verify_acc_tgts + libs_bc + libs_other + \
      ' %{all:clang:args-stable} %{all:clang:args} %{exe:clang:args} %s'
    exe_trad_compile_template += ' &&\ncd ..'
    # exe_trad_link
    exe_trad_link = ' &&\n: "Checking: Linking after traditional compile"'
    exe_trad_link += ' &&\ncd ' + subdir
    exe_trad_link += \
      ' &&\n%{exe:cmd-start} %{clang} -fopenacc' + fopenmp_targets + \
      libs_bc + libs_other + ' %{all:clang:args-stable} %{all:clang:args} ' \
      '%{exe:clang:args} -o main.exe'
    exe_trad_link += ' &&\ncd ..'
    # exe_trad_run
    exe_trad_run = ' &&\n: "Checking: Run after traditional compile"'
    exe_trad_run += ' &&\ncd ' + subdir
    exe_trad_run += \
      ' &&\n%{exe:cmd-start} ./main.exe %{exe:args} > main.out 2>&1'
    exe_trad_run += ' &&\ncd ..'
    # exe_trad_filecheck
    exe_trad_filecheck = \
      ' &&\n: "Checking: Run output with File""Check after traditional ' + \
      'compile"'
    exe_trad_filecheck += ' &&\ncd ' + subdir
    exe_trad_filecheck += ' &&\n' + filecheck_cmd('main.out')
    exe_trad_filecheck += ' &&\ncd ..'
else:
    exe_start = ': "Skipping: '
    exe_s2s_compile_template = ''
    exe_s2s_link = ''
    exe_s2s_run = ''
    exe_s2s_filecheck = ''
    exe_trad_compile_template = ''
    exe_trad_link = ''
    exe_trad_run = ''
    exe_trad_filecheck = ''

def template_to_main(cmd):
    return cmd \
      .replace('%{all:clang:args-stable}',
               '-o %{exe:base-name}.exe %{all:clang:args-stable}') \
      .replace('%{exe:base-name}', 'main')

def template_to_c(cmd):
    return cmd.replace('%{all:clang:args-stable}',
                       '-c -o %{exe:base-name}.o %{all:clang:args-stable}')

exe_s2s_compile = template_to_main(exe_s2s_compile_template)
exe_trad_compile = template_to_main(exe_trad_compile_template)

exe_s2s_compile_c = template_to_c(exe_s2s_compile_template)
exe_trad_compile_c = template_to_c(exe_trad_compile_template)

# %{acc-check-exe[-cxx]-no-s2s{,-compile-c,-compile,-link,-run,-filecheck}}
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-no-s2s}',
  exe_start + '%{acc-check-name}"' + \
  exe_trad_compile + exe_trad_run + exe_trad_filecheck)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-no-s2s-compile-c}',
  exe_start + '%{acc-check-name}"' + exe_trad_compile_c)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-no-s2s-compile}',
  exe_start + '%{acc-check-name}"' + exe_trad_compile)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-no-s2s-link}',
  exe_start + '%{acc-check-name}"' + exe_trad_link)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-no-s2s-run}',
  exe_start + '%{acc-check-name}"' + exe_trad_run)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-no-s2s-filecheck}',
  exe_start + '%{acc-check-exe-name}"' + \
  exe_trad_filecheck)

# %acc-check-exe[-cxx]{,-compile-c,-compile,-link,-run,-filecheck}
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}}',
  exe_start + '%{acc-check-name}"' + \
  exe_s2s_compile + exe_trad_compile + \
  exe_s2s_run + exe_trad_run + \
  exe_s2s_filecheck + exe_trad_filecheck)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-fn}',
  exe_start + '%{acc-check-name}"' + \
  (exe_s2s_compile + exe_trad_compile + \
   exe_s2s_run + exe_trad_run + \
   exe_s2s_filecheck + exe_trad_filecheck) \
     .replace('%{exe:clang:args}', '\\g<clang_args>')
     .replace('%{exe:fc:pres}', '\\g<fc_pres>'),
  params=['clang_args', 'fc_pres'])
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-compile-c}',
  exe_start + '%{acc-check-name}"' + \
  exe_s2s_compile_c + exe_trad_compile_c)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-compile}',
  exe_start + '%{acc-check-name}"' + \
  exe_s2s_compile + exe_trad_compile)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-link}',
  exe_start + '%{acc-check-name}"' + exe_s2s_link + \
  exe_trad_link)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-run}',
  exe_start + '%{acc-check-name}"' + \
  exe_s2s_run + exe_trad_run)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-run-fn}',
  exe_start + '%{acc-check-name}"' + \
  (exe_s2s_run + exe_trad_run) \
    .replace('%{exe:cmd-start}', '\\g<cmd_start>') \
    .replace('%{exe:args}', '\\g<args>'),
  params=['cmd_start', 'args'])
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-filecheck}',
  exe_start + '%{acc-check-name}"' + \
  exe_s2s_filecheck + exe_trad_filecheck)
substAccChecksForCAndCxx(
  '%{acc-check-exe%{-cxx}-filecheck-fn}',
  exe_start + '%{acc-check-name}"' + \
  (exe_s2s_filecheck + exe_trad_filecheck) \
    .replace('%{exe:fc:pres}', '\\g<fc_pres>'),
  params=['fc_pres'])
