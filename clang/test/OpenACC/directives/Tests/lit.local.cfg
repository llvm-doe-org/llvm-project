#-------------------------------------------------------------------------------
# Overview of "clang/test/OpenACC/directives"
#
# See "../../README.md" for important documentation about the organization of
# this portion of Clang's OpenACC test suite.  See "../../lit.local.cfg" for the
# LIT configuration shared with the rest of Clang's OpenACC test suite.
#
# Within "clang/test/OpenACC/directives", all test appear in the "Tests"
# subdirectory.  That's actually configured for LIT as an excluded directory,
# but other subdirectories are symbolic links to "Tests" in order to effectively
# replicate every test as part of a different sub test suite:
#
# * "dump" runs checks from %acc-check-dump{...} substitutions.
# * "print" runs checks from %acc-check-print{...} substitutions.
# * "host" runs checks from %acc-check-exe*{...} substitutions and selects no
#   device types for offload compilation.
# * Each architecture-specific sub test suite ("x86_64-pc-linux-gnu",
#   "nvptx64-nvidia-cuda", etc.) runs checks from %acc-check-exe*{...}
#   substitutions and selects just the specified device type for offload
#   compilation.  All tests in the sub test suite are marked unsupported if that
#   device type is not available on the system.
# * The latter two are sometimes called "execution sub test suites" to indicate
#   they run checks from %acc-check-exe*{...} substitutions.
#
# For each sub test suite, its name is added to the LIT features that can be
# used in REQUIRES, UNSUPPORTED, and XFAIL.
#
# LIT substitutions are documented where they are defined below.  Their
# expansions often depend on the sub test suite.  For example, each of the
# above sub test suites suppresses checks from the %acc-check-*{...}
# substitutions associated with other sub test suites by adjusting their
# expansions.  To be clear, all "RUN:" directives execute as usual in LIT.  The
# only difference is how substitutions within them expand.
#...............................................................................
# %acc-check-*{...} general syntax
#
# The general syntax of each %acc-check-*{...} substitution is as follows:
# * For example:
#
#     // RUN: %acc-check-exe{clang-args: -DFOO=1; exe-args: 2}
#
#   This expands %acc-check-exe with the parameter "clang-args" set to
#   "-DFOO=1" and the parameter "exe-args" set to "2".
# * Each %acc-check-* is documented in more detail where it is defined below.
#   That documentation includes the formal parameter list.
# * Arguments must appear in the same order as in the formal parameter list.
#   That is, their names are required purely for readability and do not permit
#   them to be omitted or specified in a different order.  There's one
#   exception: an argument with an empty value can be omitted entirely
#   (including any preceding ";", the name, the ":", and the value) if all later
#   arguments are omitted entirely as well.
# * The braces enclosing the argument list cannot be omitted even if all
#   arguments are omitted.
# * Argument values cannot include any character in the set "{};".  As a result,
#   these substitutions cannot appear in each other's arguments.
# * A series of spaces is ignored if it immediately precedes (1) an argument
#   name, (2) the ":" following an argument name, (2) an argument value, or (3)
#   a ";".
# * To format an argument list across multiple lines, "\" must escape each
#   newline as usual in LIT.  For example:
#
#     // RUN: %acc-check-exe{                                                  \
#     // RUN:   clang-args: -DFOO=1;                                           \
#     // RUN:   exe-args:   2}
#
#   It's best not to move the closing "}" to the following line, where LIT might
#   mistake it for the closing "}" of a %for {...}.
# * If the syntax rules for a %acc-check-*{...} substitution are not obeyed, LIT
#   usually doesn't recognize the substitution and so doesn't expand it.
#   Usually the result is a shell error about an unknown command named something
#   like "%acc-check-exe".
#...............................................................................
# FileCheck prefixes and components
#
# Many of the %acc-check-*{...} substitutions execute FileCheck commands.
# FileCheck prefixes for these commands are built as follows:
# * Each %acc-check-*{...} expansion has (see individual documentation below):
#   * A predefined FileCheck prefix base.  For example:
#
#       PRT
#
#   * A predefined sequence of FileCheck prefix component sets that are included
#     or excluded based on the check being run.  For example:
#
#       set 1: NOACC,A,AO,O,OA
#       set 2: AST,SRC
#
#   * A final set of FileCheck prefix components specified by any "fc-pres"
#     argument to the %acc-check-*{...} substitution.  All of these components
#     are always included.
# * The FileCheck prefixes used are built by appending components to the prefix
#   base, with "-" separating components, as follows:
#   * Always use the prefix base by itself as a prefix.  For example:
#
#       PRT
#
#   * To the prefix base, append every included prefix component from the first
#     set.  For example, if -fopenacc-print=omp-acc is being checked, then
#     NOACC, A, and AO are excluded, but O and OA are included, so the prefixes
#     should be:
#
#       PRT,PRT-O,PRT-OA
#
#   * To each of the prefixes built so far, append every included prefix
#     component from the second set.  For example, because
#     -fopenacc-print=omp-acc is being checked, AST should be excluded, but SRC
#     should be included, so the prefixes should be:
#
#       PRT,PRT-O,PRT-OA,PRT-SRC,PRT-O-SRC,PRT-OA-SRC
#
#   * And so on, in the order of the predefined sets, and concluding with the
#     set from any "fc-pres" argument.
# * The result is a set of FileCheck prefixes that can be used to identify
#   the combination of conditions under which a FileCheck directive should be
#   enabled.  For example:
#   * Use "PRT" if the FileCheck directive should always be enabled for this
#     %acc-check-*{...} substitution's FileCheck commands.
#   * Use "PRT-OA" if the FileCheck directive should be enabled when checking
#     either -fopenacc-ast-print=omp-acc or -fopenacc-print=omp-acc.
#   * Use "PRT-OA-AST" if the FileCheck directive should be enabled only when
#     checking -fopenacc-ast-print=omp-acc.
#   * Notice that "PRT-AST-OA" is never included.  That is, prefix components
#     can be omitted from a prefix if they do not indicate desired conditions,
#     but they cannot be reordered.
#
# WARNING: Be conservative about adding new prefix components.  They can
# significantly increase test suite execution time.  See discussion of prefixes
# for %acc-check-exe[-no-s2s]{...} for more details.
#...............................................................................
# Preprocessor definitions (-D)
#
# All Clang commands expanded from all %acc-check-*{...} substitutions in all
# sub test suites set each of the following preprocessor macros to 1 if the
# condition it indicates is true, and otherwise it leaves it undefined:
#
# * "TGT_HOST":
#   * Indicates compilation is only for host.
#   * This is true throughout the "dump", "print", and "host" sub test suites.
# * "TGT_" followed by the uppercase version of the omp_device_t spelling of an
#   architecture-specific device type:
#   * For example, "TGT_X86_64" or "TGT_NVPTX64".
#   * Indicates offload compilation for that device type.
#   * This is true throughout the associated architecture-specific sub test
#     suite.
# * "TGT_USE_STDIO":
#   * Indicates the device type selected for compilation supports stdio (e.g.,
#     "printf") in target regions.
#   * This is true throughout the "dump", "print", and "host" sub test suites.
#   * This is true in some architecture-specific sub test suites.
# * "EXE_S2S_AST_PRT":
#   * Indicates an execution sub test suite and either:
#     * Source-to-source mode with -fopenacc-ast-print=omp.
#     * OpenMP compilation after that.
# * "EXE_S2S_PRT":
#   * Indicates an execution sub test suite and either:
#     * Source-to-source mode with -fopenacc-ast-print=omp.
#     * OpenMP compilation after that.
# * "EXE_TRAD":
#   * Indicates an execution sub test suite and traditional compilation.
#-------------------------------------------------------------------------------

from enum import Enum
import re
import subprocess
from OpenACCTestConfigHelpers import \
  addPrefixComponents, addPrefixComponentsFromMatch, tgtToOMP, \
  tgtSupportsStdio, tgtBcPathClangOpt

# Which subdirectory and thus sub test suite is this?
current_subdir = os.path.basename(os.path.dirname(__file__))
# Add that to the LIT available features.
config.available_features.add(current_subdir)

#-------------------------------------------------------------------------------
# Various helpers used to implement substitutions below.
#-------------------------------------------------------------------------------

# Given the formal parameter names for an %acc-check-*{...} substitution, build
# the substitution's regex for matching an actual argument list, including the
# enclosing braces.  Dashes in a formal parameter name are replaced with
# underscores in the corresponding python substitution group name, where dashes
# are not permitted.
def buildAccCheckArgsRegex(param_names):
    assert(len(param_names) > 0)
    start = '{'
    end = '}'
    for i, param_name in enumerate(param_names):
        start += '(?:'
        if i > 0:
            start += ' *;'
        start += ' *'
        start += \
          param_name + ' *: *(?P<'+ param_name.replace('-', '_') + '>[^{};]*)'
        end = ')?' + end
    return start + end

# Given the formal parameter names for an %acc-check-*{...} substitution, build
# the substitution's replacement string for showing an actual argument list,
# including the enclosing braces.  Dashes in a formal parameter name are
# replaced with underscores in the corresponding python substitution group
# name, where dashes are not permitted.
def buildAccCheckArgsRepl(param_names):
    return '{' + \
        '; '.join([param_name + ': \\g<' + param_name.replace('-', '_') + '>'
                   for param_name in param_names]) + '}'

# This substitution is used in %acc-check-* expansions to combine FileCheck
# prefix components from fc-pres arguments with base FileCheck prefixes.  It is
# not intended to be used directly in tests.
#
# This is likely the only LIT configuration that specifies a function as a LIT
# substitution value.  We have to do it this way because we're not performing a
# replacement that simply inserts matched groups into fixed positions in other
# fixed text.  Instead, at substitution time, we have to compute the replacement
# from the matched groups using a more sophisticated algorithm.
#
# TODO: Because we're using a function in a LIT substitution value, this depends
# on a small LIT modification in the processLine function in the
# applySubstitutions function in llvm/utils/lit/lit/TestRunner.py to accept that
# function rather than trying to convert it to a string.  At the time of this
# writing, that had not yet been upstreamed.
config.substitutions.insert(0,
  ('%pre{(?P<prefixes>[^{};]*); *(?P<component_set>[^{};]*)}',
  addPrefixComponentsFromMatch))

# Common components of Clang command lines.
clang = '%clang'
incs = ' -isystem ' + config.libacc2omp_dir + ' -isystem ' + config.libomp_dir
verify_noacc = ' -Xclang -verify=expected,noacc'
verify_acc = ' -Xclang -verify=expected,acc'
verify_omp = ' -Xclang -verify=expected,omp'
defs_no_tgt = ' -DTGT_HOST -DTGT_USE_STDIO'

# The OpenMP version required by the OpenACC implementation.
fopenmp_version = ' -fopenmp-version=51'

#-------------------------------------------------------------------------------
# %if-tgt-COND<TRUE|FALSE>
# %if-exe-COND
#
# These substitutions are always defined, including in the "dump" and "print"
# sub test suites, but their expansions depend on the current sub test suite.
#
# COND values:
# * "host" indicates compilation only for host.
# * The omp_device_t spelling of an architecture-specific device type (e.g.,
#   "x86_64" or "nvptx64") indicates offload compilation only for that device
#   type.
#
# Behavior of %if-tgt-COND<TRUE|FALSE>:
# * Expands to TRUE if the condition indicated by COND is true, and expands to
#   FALSE otherwise.
# * COND="host" is true throughout the "dump", "print", and "host" sub test
#   suites.  Otherwise, COND is true throughout the architecture-specific sub
#   test suite it indicates.  COND is false otherwise.
# * TRUE and FALSE cannot include any character in the set "<>|".  As a
#   result, these substitutions cannot appear in each other's arguments.
# * Either TRUE or FALSE can be the empty string.
# * "|" cannot be omitted even if FALSE is the empty string.  Otherwise, it's
#   too easy to read any comma within TRUE as the delimiter.
# * These substitutions are designed to avoid syntactic ambiguity when:
#   * They appear within %acc-check-*{...} arguments.
#   * They appear within %data {...}.
#   * TRUE or FALSE contains commas (e.g., for delimiting FileCheck prefix
#     components).
#
# Behavior of %if-exe-COND:
# * This should be placed in front of any command line in a "RUN:" directive if
#   that command line should run only when the current sub test suite is the
#   exact execution ("exe") sub test suite indicated by COND.
# * The command line will thus always be skipped in "dump" and "print" sub test
#   suites.
# * The command line should not contain pipes as it will be placed in the
#   argument list of a ":" when it should be skipped.
# * A comment indicating whether the command is being run or skipped is
#   prepended to the command line using ":".
#
# If COND is not defined or any other syntax rules are not obeyed, LIT usually
# doesn't recognize the substitution and so doesn't expand it.  Usually the
# result is a shell error.
#-------------------------------------------------------------------------------

for tgt in list(config.tgt_to_ndevs):
    tgt_omp = tgtToOMP(tgt)
    tgt_cond = "tgt-" + tgt_omp
    exe_cond = "exe-" + tgt_omp
    exe_cond_val = current_subdir == tgt
    tgt_cond_val = exe_cond_val or \
      tgt == "host" and (current_subdir == 'dump' or current_subdir == 'print')
    config.substitutions.append(('%if-' + tgt_cond + '<([^<>|]*)\|([^<>|]*)>',
                                 '\\1' if tgt_cond_val else '\\2'))
    config.substitutions.append(('%if-' + exe_cond,
      ': "Running: ' + exe_cond + ' check" &&\n' if exe_cond_val else \
      ': "Skipping: ' + exe_cond + ' check:" '))

#-------------------------------------------------------------------------------
# %acc-check-dmp{...}
#
# Check AST dumps before and after AST serialization.
#
# The parameter list is:
# * clang-args: Additional command-line arguments to pass to all Clang commands.
# * fc-args: Additional command-line arguments to pass to all FileCheck
#   commands.
# * fc-pres: A comma-separated list of FileCheck prefix components.
#
# FileCheck prefixes are as follows:
# * The prefix base is "DMP".
# * There are no predefined sets of prefix components.
# * See the generic %acc-check-*{...} documentation at the beginning of this
#   file for details on how FileCheck prefixes are built.
#-------------------------------------------------------------------------------

dmp_param_names = ['clang-args', 'fc-args', 'fc-pres']
if current_subdir == 'dump':
    filecheck_prefixes = ['DMP']
    dmp_cmds = \
      ': "Running: %acc-check-dmp' + buildAccCheckArgsRepl(dmp_param_names) + \
      '"'
    # Check before AST serialization.
    dmp_cmds += ' &&\n: "Checking: -ast-dump"'
    dmp_cmds += \
      ' &&\n' + clang + ' -fopenacc -Xclang -ast-dump -fsyntax-only' + \
      defs_no_tgt + incs + verify_acc + ' \\g<clang_args> %s > %t.dmp'
    dmp_cmds += \
      ' &&\nFileCheck -input-file=%t.dmp -check-prefixes=%pre{' + \
      ','.join(filecheck_prefixes) + '; \\g<fc_pres>} \\g<fc_args> %s'
    # Check after AST serialization.
    dmp_cmds += ' &&\n: "Checking: -ast-dump after -emit-ast"'
    dmp_cmds += \
      ' &&\n' + clang + ' -fopenacc -emit-ast' + defs_no_tgt + incs + \
      verify_acc + ' \\g<clang_args> -o %t.ast %s'
    dmp_cmds += ' &&\n%clang_cc1 -ast-dump-all %t.ast > %t.ast.dmp'
    dmp_cmds += \
      ' &&\nFileCheck -input-file=%t.ast.dmp ' + \
      '-check-prefixes=%pre{' + ','.join(filecheck_prefixes) + \
      '; \\g<fc_pres>} \\g<fc_args> %s'
else:
    dmp_cmds = \
      ': "Skipping: %acc-check-dmp' + buildAccCheckArgsRepl(dmp_param_names) + \
      '"'
config.substitutions.insert(0,
  ('%acc-check-dmp' + buildAccCheckArgsRegex(dmp_param_names), dmp_cmds))

#-------------------------------------------------------------------------------
# %acc-check-prt{...}
#
# Check -ast-print (with OpenACC disabled and enabled) and
# -fopenacc[-ast]-print (with every possible argument).
#
# Check before and after AST serialization.  Some data related to printing
# (where to print comments about discarded directives) is serialized and
# deserialized, so it's worthwhile to try all OpenACC printing modes.
#
# "//"-style comments and blank lines are stripped before checking
# -fopenacc[-ast]-print to make FileCheck directives easier to write for
# -fopenacc-print.  "/*...*/"-style comments are not stripped and should be used
# for Clang -verify directives.
#
# -Wno-openacc-omp-ext is always specified to suppress all warnings about the
# use of OpenMP extensions in the translations.  Checks that those warnings are
# working correctly appear in clang/test/OpenACC/diagnostics instead.
#
# The parameter list is:
# * clang-args: Additional command-line arguments to pass to all Clang commands.
# * fc-args: Additional command-line arguments to pass to all FileCheck
#   commands.
# * fc-pres: A comma-separated list of FileCheck prefix components.
#
# FileCheck prefixes are as follows:
# * The prefix base is "PRT".
# * The predefined sets of prefix components are, in order:
#   * A set describing which directives are included in the print:
#     * "NOACC": OpenACC is disabled.
#     * "A": Printing is specified by either:
#       * -ast-print with OpenACC enabled.
#       * -fopenacc[-ast]-print=acc[-omp].
#     * "AO": Printing is specified by -fopenacc[-ast]-print=acc-omp.
#     * "O": Printing is specified by -fopenacc[-ast]-print=omp-[acc].
#     * "OA": Printing is specified by -fopenacc[-ast]-print=omp-acc.
#     * It follows that:
#       * If "AO" is included, "A" is also included.
#       * If "OA" is included, "O" is also included.
#       * Given the subsets {"NOACC"}, {"A", "AO"}, and {"O", "OA"}, if a member
#         of one subset is included, no member of any other subset is included.
#   * A set describing the mode of printing:
#     * "AST": Printing is specified by either -ast-print or
#       -fopenacc-ast-print.
#     * "SRC": Printing is specified by -fopenacc-print.
# * See the generic %acc-check-*{...} documentation at the beginning of this
#   file for details on how FileCheck prefixes are built.
#-------------------------------------------------------------------------------

class PrtTypeProps:
    def __init__(self, clang_args, verify, fc_pre_sets):
        self.clang_args = clang_args
        self.verify = verify
        self.fc_pre_sets = fc_pre_sets

class PrtType(Enum):
    AstPrtNoAcc = PrtTypeProps(
      clang_args='-Xclang -ast-print -fsyntax-only',
      verify=verify_noacc,
      fc_pre_sets=[['NOACC'], ['AST']])
    AstPrtAcc = PrtTypeProps(
      clang_args='-Xclang -ast-print -fsyntax-only -fopenacc',
      verify=verify_acc,
      fc_pre_sets=[['A'], ['AST']])
    AccAstPrtAcc = PrtTypeProps(
      clang_args='-fopenacc-ast-print=acc',
      verify=verify_acc,
      fc_pre_sets=[['A'], ['AST']])
    AccAstPrtOmp = PrtTypeProps(
      clang_args='-fopenacc-ast-print=omp',
      verify=verify_acc,
      fc_pre_sets=[['O'], ['AST']])
    AccAstPrtAccOmp = PrtTypeProps(
      clang_args='-fopenacc-ast-print=acc-omp',
      verify=verify_acc,
      fc_pre_sets=[['A', 'AO'], ['AST']])
    AccAstPrtOmpAcc = PrtTypeProps(
      clang_args='-fopenacc-ast-print=omp-acc',
      verify=verify_acc,
      fc_pre_sets=[['O', 'OA'], ['AST']])
    AccPrtAcc = PrtTypeProps(
      clang_args='-fopenacc-print=acc',
      verify=verify_acc,
      fc_pre_sets=[['A'], ['SRC']])
    AccPrtOmp = PrtTypeProps(
      clang_args='-fopenacc-print=omp',
      verify=verify_acc,
      fc_pre_sets=[['O'], ['SRC']])
    AccPrtAccOmp = PrtTypeProps(
      clang_args='-fopenacc-print=acc-omp',
      verify=verify_acc,
      fc_pre_sets=[['A', 'AO'], ['SRC']])
    AccPrtOmpAcc = PrtTypeProps(
      clang_args='-fopenacc-print=omp-acc',
      verify=verify_acc,
      fc_pre_sets=[['O', 'OA'], ['SRC']])
    def prt_cmd(self, args):
        sp_args = (' ' if args else '') + args
        return clang + ' ' + self.value.clang_args + incs + \
          self.value.verify + ' -Wno-openacc-omp-ext' + sp_args
    def filecheck_cmd(self, args, prefix_components):
        sp_args = (' ' if args else '') + args
        fc_prefixes = addPrefixComponents(['PRT'], self.value.fc_pre_sets)
        return 'FileCheck -check-prefixes=%pre{' + \
          ','.join(fc_prefixes) + '; ' + prefix_components + '} ' + sp_args

prt_param_names = ['clang-args', 'fc-args', 'fc-pres']
if current_subdir == 'print':
    prt_cmds = \
      ': "Running: %acc-check-prt' + buildAccCheckArgsRepl(prt_param_names) + \
      '"'
    # Check -ast-print with OpenACC disabled.
    prt_cmds += ' &&\n: "Checking: -ast-print without -fopenacc"'
    prt_cmds += \
      ' &&\n' + \
      PrtType.AstPrtNoAcc.prt_cmd(defs_no_tgt + ' \\g<clang_args>') + \
      ' %s > %t.prt'
    prt_cmds += \
      ' &&\n' + \
      PrtType.AstPrtNoAcc.filecheck_cmd('\\g<fc_args>', '\\g<fc_pres>') + \
      ' -input-file=%t.prt %s'
    # Strip comments and blank lines so checking -fopenacc-print output is
    # easier
    prt_cmds += \
      ' &&\n: "Checking: Stripping source to make printing checks easier"'
    prt_cmds += \
      ' &&\ngrep -v \'^ *\(//.*\)\?$\' %s | sed \'s,//.*,,\' > %t-acc.c'
    # Check various ways of printing OpenACC and its OpenMP translation.
    for prt_type in PrtType:
        if prt_type == PrtType.AstPrtNoAcc:
            continue # checked that above already
        prt_cmds += ' &&\n: "Checking: ' + prt_type.value.clang_args + '"'
        prt_cmds += \
          ' &&\n' + prt_type.prt_cmd(defs_no_tgt + ' \\g<clang_args>') + \
          ' %t-acc.c > %t.prt'
        prt_cmds += \
          ' &&\n' + prt_type.filecheck_cmd('\\g<fc_args>', '\\g<fc_pres>') + \
          ' -input-file=%t.prt %s'
    # Check -ast-print after AST serialization.
    prt_cmds += ' &&\n: "Checking: -emit-ast before various forms of printing"'
    prt_cmds += \
      ' &&\n' + clang + ' -fopenacc -emit-ast ' + defs_no_tgt + incs + \
      verify_acc + ' \\g<clang_args> -o %t.ast %t-acc.c'
    for prt_type in PrtType:
        if prt_type == PrtType.AstPrtNoAcc:
            continue
        prt_cmds += \
          ' &&\n: "Checking: ' + prt_type.value.clang_args + ' after -emit-ast"'
        prt_cmds += \
          ' &&\n' + prt_type.prt_cmd(defs_no_tgt + ' \\g<clang_args>') + \
          ' %t.ast > %t.prt'
        prt_cmds += \
          ' &&\n' + prt_type.filecheck_cmd('\\g<fc_args>', '\\g<fc_pres>') + \
          ' -input-file=%t.prt %s'
else:
    prt_cmds = \
      ': "Skipping: %acc-check-prt' + buildAccCheckArgsRepl(prt_param_names) + \
      '"'
config.substitutions.insert(0,
  ('%acc-check-prt' + buildAccCheckArgsRegex(prt_param_names), prt_cmds))

#-------------------------------------------------------------------------------
# %acc-check-exe[-no-s2s]{...}
#
# Check execution with various compilation types and various offload
# configurations.  FileCheck is used to examine the combination of stdout and
# stderr from the application.  %acc-check-exe{...} is the same as
# %acc-check-exe-no-s2s{...} except that the latter does not check
# source-to-source compilation.
#
# The parameter list is:
# * clang-args: Additional command-line arguments to pass to all Clang commands.
# * exe-args: Command-line arguments to pass to the compiled application.
# * fc-args: Additional command-line arguments to pass to all FileCheck
#   commands.
# * fc-pres: A comma-separated list of FileCheck prefix components.
# * cmd-start: Code to insert before every shell command.  For example, it might
#   be ":" to suppress all commands (no pipes are used in commands so that this
#   works correctly).
#
# FileCheck prefixes are as follows:
# * The prefix base is "EXE".
# * There is one predefined set of prefix components: a set describing the
#   offload compilation configuration:
#   * "HOST": Offloading is disabled.
#   * "OFF": Offloading is enabled for some device type.
#   * "TGT-" followed by the uppercase version of the omp_device_t spelling of
#     an architecture-specific device type: Offloading is enabled for that
#     device type.
#   * "TGT-USE-STDIO": Target regions support stdio.  Always included if "HOST"
#     is included.
#   * "OFF-TGT-USE-STDIO": Included if "OFF" and "TGT-USE-STDIO" are included.
#     To reduce the number of FileCheck prefixes, TGT-USE-STDIO is never
#     combined with "HOST" or an architecture-specific "TGT-" prefix component.
#     Those are sufficient to determine whether target regions support stdio,
#     but "OFF-TGT-USE-STDIO" permits being more general.
# * WARNING: Be conservative about adding new prefix components.  They can
#   significantly increase test suite execution time.  For this reason, we do
#   not have "TGT-NOT-<ARCH>" prefixes.  One day hopefully FileCheck will
#   support directives like "CHECK-IF(!COND1 && !COND2):" so that the
#   inefficiency and complexity of prefix combinations and component negations
#   will no longer be necessary.
# * See the generic %acc-check-*{...} documentation at the beginning of this
#   file for details on how FileCheck prefixes are built.
#...............................................................................
# %acc-check-exe[-no-s2s]-compile{...}
# %acc-check-exe[-no-s2s]-run{...}
# %acc-check-exe[-no-s2s]-filecheck{...}
#
# These substitutions enable decomposing %acc-check-exe[-no-s2s]{...} into their
# stages of compiling, running, and checking output with FileCheck.  For
# example, this can permit compiling once and then running and checking output
# multiple times with varying command-line arguments.  It can also permit use
# the "cmd-start" argument to insert "not" in front of only the application
# execution.
#
# %acc-check-exe-compile{...} compiles using all compile types.
# %acc-check-exe-no-s2s-compile{...} compiles using traditional compilation
# mode only.  In either case, the parameter list is:
# * clang-args: Additional command-line arguments to pass to all Clang commands.
# * cmd-start: Code to insert before every shell command.
#
# %acc-check-exe[-no-s2s]-run{...} runs the application for all compile types
# produced by %acc-check-exe[-no-s2s]-compile{...}, respectively.  The parameter
# list is:
# * exe-args: Command-line arguments to pass to the compiled application.
# * cmd-start: Code to insert before every shell command.
#
# %acc-check-exe[-no-s2s]-filecheck{...} uses FileCheck to verify the output
# from every run produced by %acc-check-exe[-no-s2s]-run{...}, respectively.
# The parameter list is:
# * fc-args: Additional command-line arguments to pass to all FileCheck
#   commands.
# * fc-pres: A comma-separated list of FileCheck prefix components.
# * cmd-start: Code to insert before every shell command.
#
# FileCheck prefixes are as defined for %acc-check-exe[-no-s2s]{...}.
#...............................................................................
# %acc-check-exe[-no-s2s]-compile-c{...}
# %acc-check-exe[-no-s2s]-link{...}
#
# These substitutions enable decomposing %acc-check-exe[-no-s2s]-compile{...}
# into their compiling and linking stages.  For example, this can permit
# compiling and linking multiple compilation units into the same executable.
#
# The %acc-check-exe[-no-s2s]-compile-c{...} parameter list is:
# * base-name: The base name to use for this compilation unit.  Most
#   importantly, if the value is "foo", the object file name will be "foo.o".
#   The working directory is changed for each compilation type, so "foo.o" will
#   always resolve to the desired object file for every compilation type when it
#   is checked.
# * clang-args: Additional command-line arguments to pass to all Clang commands.
# * cmd-start: Code to insert before every shell command.
#
# The %acc-check-exe[-no-s2s]-link{...} argument list is:
# * clang-args: Additional command-line arguments to pass to all Clang commands.
#   This is at least a series of object files.
# * cmd-start: Code to insert before every shell command.
#-------------------------------------------------------------------------------

exe_param_names = ['clang-args', 'exe-args', 'fc-args', 'fc-pres', 'cmd-start']
exe_compile_c_param_names = ['base-name', 'clang-args', 'cmd-start']
exe_link_param_names = ['clang-args', 'cmd-start']
exe_compile_param_names = ['clang-args', 'cmd-start']
exe_run_param_names = ['exe-args', 'cmd-start']
exe_filecheck_param_names = ['fc-args', 'fc-pres', 'cmd-start']

if current_subdir in list(config.tgt_to_ndevs):
    current_tgt = current_subdir

    # Mark the current subdirectory as unsupported if it's a target triple for a
    # device type that's unavailable on the current system.
    if current_tgt != 'host':
        config.unsupported = config.tgt_to_ndevs[current_tgt] == 0

    # Common components of Clang command lines.
    verify_acc_tgts = verify_acc
    verify_omp_tgts = verify_omp
    if current_tgt == 'host':
        fopenmp_targets = ''
    else:
        fopenmp_targets = ' -fopenmp-targets=' + current_tgt
        verify_acc_tgts += ',' + tgtToOMP(current_tgt)
        verify_omp_tgts += ',' + tgtToOMP(current_tgt)
    libs_acc = ' -lacc2omp'
    libs_bc = tgtBcPathClangOpt(current_tgt, config.libomptarget_dir)
    if libs_bc:
        libs_bc = ' ' + libs_bc
    # For some Linux platforms, -latomic is required for OpenMP support for
    # reductions on complex types.
    libs_other = ''
    if config.has_libatomic:
        libs_other += ' -latomic'

    def filecheck_cmd(input_file, fc_compile_type):
        tgt_pres = []
        tgt_pres.append('HOST' if current_tgt == 'host' else 'OFF')
        if current_tgt != 'host':
            tgt_pres.append('TGT-' + tgtToOMP(current_tgt).upper())
        if tgtSupportsStdio(current_tgt):
            tgt_use_stdio = 'TGT-USE-STDIO'
            tgt_pres.append(tgt_use_stdio)
            if current_tgt != 'host':
                tgt_pres.append('OFF-' + tgt_use_stdio)
        fc_prefixes = addPrefixComponents(['EXE'], [tgt_pres])
        return '\\g<cmd_start> FileCheck -input-file ' + input_file + \
          ' -check-prefixes=%pre{' + ','.join(fc_prefixes) + \
          '; \\g<fc_pres>} \\g<fc_args> %s'

    exe_start = ': "Running: '

    # Can we print the OpenMP source code, compile, and run it successfully?
    #
    # -fopenacc-ast-print is guaranteed to expand includes and macros
    # appropiately only for the host architecture, so don't try to use it for
    # offload compilation.  Do try it for the host as it's a good way to catch
    # AST printing issues.  In that case, don't bother with -verify when
    # compiling the generated OpenMP because printing the AST loses all comments
    # and thus all -verify directives.  Thus, we won't catch any unexpected
    # warnings, but we'll still catch errors.  Also, drop -Wunused-function
    # errors, which were suppressed when Clang knew they were from system
    # headers but are not suppressed now.
    #
    # Checking this for offloading is especially important when checking DMAs
    # or the update directive because they have no effect when not offloading
    # (that is, for shared memory).  Moreover, in some such cases, one of the
    # main issues to test is the various ways of translating so they can be used
    # in source-to-source mode when targeting other compilers.  That is, we want
    # to be sure source-to-source mode produces working translations.
    exe_s2s_compile_template = ''
    exe_s2s_link = ''
    exe_s2s_run = ''
    exe_s2s_filecheck = ''
    defs_tgt = ' -DTGT_' + tgtToOMP(current_tgt).upper()
    if tgtSupportsStdio(current_tgt):
      defs_tgt += ' -DTGT_USE_STDIO'
    for prt_type in [PrtType.AccAstPrtOmp, PrtType.AccPrtOmp]:
        if prt_type == PrtType.AccAstPrtOmp:
            if current_tgt != 'host':
                continue
            subdir = '%t-s2s-ast-prt'
            defs_exe = ' -DEXE_S2S_AST_PRT'
            fc_compile_type = 'S2S-AST-PRT'
        else:
            assert(prt_type == PrtType.AccPrtOmp)
            subdir = '%t-s2s-prt'
            defs_exe = ' -DEXE_S2S_PRT'
            fc_compile_type = 'S2S-PRT'
        # exe_s2s_compile_template
        exe_s2s_compile_template += \
          ' &&\n: "Checking: Source-to-source compile for ' + \
          '\'\\g<base_name>\' with ' + prt_type.value.clang_args + '"'
        exe_s2s_compile_template += \
          ' &&\nmkdir -p ' + subdir + ' && cd ' + subdir
        exe_s2s_compile_template += \
          ' &&\n\\g<cmd_start> ' + \
          prt_type.prt_cmd(defs_tgt + defs_exe + ' \\g<clang_args>') + \
          ' %s > \\g<base_name>-omp.c'
        exe_s2s_compile_template += \
          ' &&\n\\g<cmd_start> ' + clang + ' -fopenmp ' + fopenmp_version + \
          fopenmp_targets + defs_tgt + defs_exe + incs + \
          (verify_omp_tgts if prt_type == PrtType.AccPrtOmp else
           ' -Wno-unused-function') + \
          libs_acc + libs_bc + libs_other + \
          ' \\g<clang_args> \\g<base_name>-omp.c'
        exe_s2s_compile_template += ' &&\ncd ..'
        # exe_s2s_link
        exe_s2s_link += \
          ' &&\n: "Checking: Linking after source-to-source compile with ' + \
          prt_type.value.clang_args + '"'
        exe_s2s_link += ' &&\ncd ' + subdir
        exe_s2s_link += \
          ' &&\n\\g<cmd_start> ' + clang + ' -fopenmp ' + fopenmp_version + \
          fopenmp_targets + libs_acc + libs_bc + libs_other + \
          ' \\g<clang_args> -o main.exe'
        exe_s2s_link += ' &&\ncd ..'
        # exe_s2s_run
        exe_s2s_run += \
          ' &&\n: "Checking: Run after source-to-source compile with ' + \
          prt_type.value.clang_args + '"'
        exe_s2s_run += ' &&\ncd ' + subdir
        exe_s2s_run += \
          ' &&\n\\g<cmd_start> ./main.exe \\g<exe_args> > main.out 2>&1'
        exe_s2s_run += ' &&\ncd ..'
        # exe_s2s_filecheck
        exe_s2s_filecheck += \
          ' &&\n: "Checking: Run output with File""Check after ' + \
          'source-to-source compile with ' + prt_type.value.clang_args + '"'
        exe_s2s_filecheck += ' &&\ncd ' + subdir
        exe_s2s_filecheck += \
          ' &&\n' + filecheck_cmd('main.out', fc_compile_type)
        exe_s2s_filecheck += ' &&\ncd ..'

    # Check execution after traditional compilation.
    subdir = '%t-trad'
    defs_exe = ' -DEXE_TRAD'
    fc_compile_type = 'TRAD'
    # exe_trad_compile_template
    exe_trad_compile_template = \
      ' &&\n: "Checking: Traditional compile for \'\\g<base_name>\'"'
    exe_trad_compile_template += ' &&\nmkdir -p ' + subdir + ' && cd ' + subdir
    exe_trad_compile_template += \
      ' &&\n\\g<cmd_start> ' + clang + ' -fopenacc' + fopenmp_targets + \
      defs_tgt + defs_exe + incs + verify_acc_tgts + libs_bc + libs_other + \
      ' \\g<clang_args> %s'
    exe_trad_compile_template += ' &&\ncd ..'
    # exe_trad_link
    exe_trad_link = ' &&\n: "Checking: Linking after traditional compile"'
    exe_trad_link += ' &&\ncd ' + subdir
    exe_trad_link += \
      ' &&\n\\g<cmd_start> ' + clang + ' -fopenacc' + fopenmp_targets + \
      libs_bc + libs_other + ' \\g<clang_args> -o main.exe'
    exe_trad_link += ' &&\ncd ..'
    # exe_trad_run
    exe_trad_run = ' &&\n: "Checking: Run after traditional compile"'
    exe_trad_run += ' &&\ncd ' + subdir
    exe_trad_run += \
      ' &&\n\\g<cmd_start> ./main.exe \\g<exe_args> > main.out 2>&1'
    exe_trad_run += ' &&\ncd ..'
    # exe_trad_filecheck
    exe_trad_filecheck = \
      ' &&\n: "Checking: Run output with File""Check after traditional ' + \
      'compile"'
    exe_trad_filecheck += ' &&\ncd ' + subdir
    exe_trad_filecheck += ' &&\n' + filecheck_cmd('main.out', fc_compile_type)
    exe_trad_filecheck += ' &&\ncd ..'
else:
    exe_start = ': "Skipping: '
    exe_s2s_compile_template = ''
    exe_s2s_link = ''
    exe_s2s_run = ''
    exe_s2s_filecheck = ''
    exe_trad_compile_template = ''
    exe_trad_link = ''
    exe_trad_run = ''
    exe_trad_filecheck = ''

def template_to_main(cmd):
    return cmd \
      .replace('\\g<clang_args>', '-o \\g<base_name>.exe \\g<clang_args>') \
      .replace('\\g<base_name>', 'main')

def template_to_c(cmd):
    return cmd.replace('\\g<clang_args>',
                       '-c -o \\g<base_name>.o \\g<clang_args>')

exe_s2s_compile = template_to_main(exe_s2s_compile_template)
exe_trad_compile = template_to_main(exe_trad_compile_template)

exe_s2s_compile_c = template_to_c(exe_s2s_compile_template)
exe_trad_compile_c = template_to_c(exe_trad_compile_template)

# %acc-check-exe-no-s2s{,-compile-c,-compile,-link,-run,-filecheck}
config.substitutions.insert(0,
  ('%acc-check-exe-no-s2s' + buildAccCheckArgsRegex(exe_param_names),
   exe_start + '%acc-check-exe-no-s2s' + \
   buildAccCheckArgsRepl(exe_param_names) + \
   '"' + exe_trad_compile + exe_trad_run + exe_trad_filecheck))
config.substitutions.insert(0,
  ('%acc-check-exe-no-s2s-compile-c' + \
   buildAccCheckArgsRegex(exe_compile_c_param_names),
   exe_start + '%acc-check-exe-no-s2s-compile-c' + \
   buildAccCheckArgsRepl(exe_compile_c_param_names) + '"' + exe_trad_compile_c))
config.substitutions.insert(0,
  ('%acc-check-exe-no-s2s-compile' + \
   buildAccCheckArgsRegex(exe_compile_param_names),
   exe_start + '%acc-check-exe-no-s2s-compile' + \
   buildAccCheckArgsRepl(exe_compile_param_names) + '"' + exe_trad_compile))
config.substitutions.insert(0,
  ('%acc-check-exe-no-s2s-link' + buildAccCheckArgsRegex(exe_link_param_names),
   exe_start + '%acc-check-exe-no-s2s-link' + \
   buildAccCheckArgsRepl(exe_link_param_names) + '"' + exe_trad_link))
config.substitutions.insert(0,
  ('%acc-check-exe-no-s2s-run' + buildAccCheckArgsRegex(exe_run_param_names),
   exe_start + '%acc-check-exe-no-s2s-run' + \
   buildAccCheckArgsRepl(exe_run_param_names) + '"' + exe_trad_run))
config.substitutions.insert(0,
  ('%acc-check-exe-no-s2s-filecheck' + \
   buildAccCheckArgsRegex(exe_filecheck_param_names),
   exe_start + '%acc-check-exe-no-s2s-filecheck' + \
   buildAccCheckArgsRepl(exe_filecheck_param_names) + '"' + \
   exe_trad_filecheck))

# %acc-check-exe{,-compile-c,-compile,-link,-run,-filecheck}
config.substitutions.insert(0,
  ('%acc-check-exe' + buildAccCheckArgsRegex(exe_param_names),
   exe_start + '%acc-check-exe' + \
   buildAccCheckArgsRepl(exe_param_names) + '"' + \
   exe_s2s_compile + exe_trad_compile + \
   exe_s2s_run + exe_trad_run + \
   exe_s2s_filecheck + exe_trad_filecheck))
config.substitutions.insert(0,
  ('%acc-check-exe-compile-c' + \
   buildAccCheckArgsRegex(exe_compile_c_param_names),
   exe_start + '%acc-check-exe-compile-c' + \
   buildAccCheckArgsRepl(exe_compile_c_param_names) + '"' + \
   exe_s2s_compile_c + exe_trad_compile_c))
config.substitutions.insert(0,
  ('%acc-check-exe-compile' + buildAccCheckArgsRegex(exe_compile_param_names),
   exe_start + '%acc-check-exe-compile' + \
   buildAccCheckArgsRepl(exe_compile_param_names) + '"' + \
   exe_s2s_compile + exe_trad_compile))
config.substitutions.insert(0,
  ('%acc-check-exe-link' + buildAccCheckArgsRegex(exe_link_param_names),
   exe_start + '%acc-check-exe-link' + \
   buildAccCheckArgsRepl(exe_link_param_names) + '"' + exe_s2s_link + \
   exe_trad_link))
config.substitutions.insert(0,
  ('%acc-check-exe-run' + buildAccCheckArgsRegex(exe_run_param_names),
   exe_start + '%acc-check-exe-run' + \
   buildAccCheckArgsRepl(exe_run_param_names) + '"' + \
   exe_s2s_run + exe_trad_run))
config.substitutions.insert(0,
  ('%acc-check-exe-filecheck' + \
   buildAccCheckArgsRegex(exe_filecheck_param_names),
   exe_start + '%acc-check-exe-filecheck' + \
   buildAccCheckArgsRepl(exe_filecheck_param_names) + '"' + \
   exe_s2s_filecheck + exe_trad_filecheck))
