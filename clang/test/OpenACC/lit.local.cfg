import re
import lit.formats
from lit.llvm.subst import ToolSubst

def append_dynamic_library_path(name, value):
    sep = ':'
    if name in config.environment:
        config.environment[name] = value + sep + config.environment[name]
    else:
        config.environment[name] = value

# The OpenMP version required by the OpenACC implementation.
config.substitutions.append(('%fopenmp-version', '-fopenmp-version=51'))

if config.has_libatomic:
    config.substitutions.append(('%libatomic', ' -latomic'))

config.substitutions.append(('%run-if-x86_64',
                             '' if config.clang_acc_test_exe_x86_64 else ':'))
config.substitutions.append(('%run-if-ppc64le',
                             '' if config.clang_acc_test_exe_ppc64le else ':'))
config.substitutions.append(('%run-if-nvptx64',
                             '' if config.clang_acc_test_exe_nvptx64 else ':'))
config.substitutions.append(('%run-if-amdgcn',
                             '' if config.clang_acc_test_exe_amdgcn else ':'))
config.substitutions.append(('%run-x86_64-triple',
                             config.clang_acc_test_exe_x86_64_triple))
config.substitutions.append(('%run-ppc64le-triple',
                             config.clang_acc_test_exe_ppc64le_triple))
config.substitutions.append(('%run-nvptx64-triple',
                             config.clang_acc_test_exe_nvptx64_triple))
config.substitutions.append(('%run-amdgcn-triple',
                             config.clang_acc_test_exe_amdgcn_triple))

config.substitutions.append(('%acc-version', '202011'))

openmp_dir = config.llvm_obj_root + "/runtimes/runtimes-bins/openmp"
libacc2omp_dir = openmp_dir + "/libacc2omp/src"
libomp_dir = openmp_dir + "/runtime/src"
libomptarget_dir = openmp_dir + "/libomptarget"
config.substitutions.append(('%acc-includes',
                            ('-isystem ' + libacc2omp_dir + \
                             ' -isystem ' + libomp_dir)))
config.substitutions.append(('%acc-libs', '-lacc2omp'))

# Use lit's internal shell to help guarantee test portability.
config.test_format = lit.formats.ShTest(execute_external=False)

# Set up environment to find libraries at run time
append_dynamic_library_path('LD_LIBRARY_PATH', libacc2omp_dir)
append_dynamic_library_path('LD_LIBRARY_PATH', libomp_dir)
append_dynamic_library_path('LD_LIBRARY_PATH', libomptarget_dir)

for i, (key, value) in enumerate(config.substitutions):
    if re.match(r'.*%\\bclang\\b.*', key) != None:
        # Generally, we need to be aware of dead code in our tests, especially
        # because unused static functions might be test cases that are
        # accidentally not invoked.
        value += ' -Werror=unused-function'
        # Make sure the build's libraries are used not the system's.
        value += ' -L ' + libacc2omp_dir
        value += ' -L ' + libomp_dir
        value += ' -L ' + libomptarget_dir
        value += ' --libomptarget-amdgcn-bc-path=' + libomptarget_dir
        value += ' --libomptarget-nvptx-bc-path=' + libomptarget_dir
        config.substitutions[i] = (key, value)

fc = ToolSubst('FileCheck', unresolved='fatal')
# the parent introduced the opposite rule, so we replace it if we see it.
if len(config.substitutions) > 0 and \
       config.substitutions[0] == (fc.regex, \
                                   'FileCheck --allow-unused-prefixes=false'):
    config.substitutions[0] = (
        fc.regex, 'FileCheck --allow-unused-prefixes=true')
else:
    config.substitutions.insert( \
        0, (fc.regex, 'FileCheck --allow-unused-prefixes=true'))
