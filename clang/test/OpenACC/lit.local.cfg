# See "README.md" in this directory for important documentation about the
# organization of this test suite.

import re
import subprocess
import lit.formats
from lit.llvm.subst import ToolSubst
sys.path.append(os.path.join(config.clang_src_dir, 'test', 'OpenACC'))
from OpenACCTestConfigHelpers import tgtToOMP, offTgtToReg, tgtBcPathClangOpt

# Use lit's internal shell to help guarantee test portability.
config.test_format = lit.formats.ShTest(execute_external=False)

# Compute various OpenACC and OpenMP library directories.
openmp_dir = config.llvm_obj_root + "/runtimes/runtimes-bins/openmp"
config.libacc2omp_dir = openmp_dir + "/libacc2omp/src"
config.libomp_dir = openmp_dir + "/runtime/src"
config.libomptarget_dir = openmp_dir + "/libomptarget"

# Set LD_LIBRARY_PATH.  This is needed in the test suite and for the
# llvm_omp_device_info call below.
def append_dynamic_library_path(name, value):
    sep = ':'
    if name in config.environment:
        config.environment[name] = value + sep + config.environment[name]
    else:
        config.environment[name] = value
append_dynamic_library_path('LD_LIBRARY_PATH', config.libacc2omp_dir)
append_dynamic_library_path('LD_LIBRARY_PATH', config.libomp_dir)
append_dynamic_library_path('LD_LIBRARY_PATH', config.libomptarget_dir)

# Compute counts of available offload device types and report them in a lit
# note.  Unavailable device types have a count of 0.
config.tgt_to_ndevs = {'host': 1}
omp_device_info = subprocess.run(config.llvm_omp_device_info, check=True,
  stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True,
  env=config.environment).stdout
for tgt,reg in offTgtToReg.items():
    if not reg + '-registered-target' in config.available_features:
        config.tgt_to_ndevs[tgt] = 0
        continue
    config.tgt_to_ndevs[tgt] = \
      len(re.findall("omp_device_" + tgtToOMP(tgt), omp_device_info))
    if config.tgt_to_ndevs[tgt] == 0:
        continue
lit_config.note("Device counts for 'Clang' OpenACC tests: " +
                str(config.tgt_to_ndevs))

# Add substitutions for available offload targets:
# * %off-tgts is a comma-separated list (without whitespace) of the target
#   triples of offloading devices that are available on this system.  Triples
#   are not repeated for additional devices of the same type.
# * %num-off-tgts is the number of entries in %off-tgts.
# * %libs-bc contains any Clang command-line options needed to specify the .bc
#   directories for target triples in %off-tgts, or it's the empty string if no
#   options are needed.
available_off_tgts = {tgt: ndevs for tgt, ndevs in config.tgt_to_ndevs.items()
                      if tgt != 'host' and ndevs}
config.substitutions.append(('%off-tgts', ','.join(available_off_tgts)))
config.substitutions.append(('%num-off-tgts', str(len(available_off_tgts))))
libs_bc = ' '.join([tgtBcPathClangOpt(tgt, config.libomptarget_dir) \
                    for tgt,ndevs in config.tgt_to_ndevs.items() if ndevs])
config.substitutions.append(('%libs-bc', libs_bc))

# Adjust %clang substitution.
for i, (key, value) in enumerate(config.substitutions):
    if re.match(r'.*%\\bclang\\b.*', key) != None:
        # Generally, we need to be aware of dead code in our tests, especially
        # because unused static functions might be test cases that are
        # accidentally not invoked.
        value += ' -Werror=unused-function'
        # Make sure the build's libraries are used not the system's.
        value += ' -L ' + config.libacc2omp_dir
        value += ' -L ' + config.libomp_dir
        value += ' -L ' + config.libomptarget_dir
        config.substitutions[i] = (key, value)

# Adjust FileCheck substitution.
fc = ToolSubst('FileCheck', unresolved='fatal')
# The parent introduced the opposite rule, so we replace it if we see it.
if len(config.substitutions) > 0 and \
       config.substitutions[0] == (fc.regex, \
                                   'FileCheck --allow-unused-prefixes=false'):
    config.substitutions[0] = (
        fc.regex, 'FileCheck --allow-unused-prefixes=true')
else:
    config.substitutions.insert( \
        0, (fc.regex, 'FileCheck --allow-unused-prefixes=true'))

# The OpenACC version reported throughout Clang's implementation.
config.substitutions.append(('%acc-version', '202011'))
