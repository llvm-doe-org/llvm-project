# Empty values are permitted and reasonable, especially when just establishing
# expansion order.
#
# DEFINE: %{empty}=
# RUN: echo "'%{empty}'"
# CHECK:''
#
# REDEFINE: %{empty}=
# RUN: echo "'%{empty}'"
# CHECK:''

# A value consisting only of whitespace is trimmed to the empty string.
#
#               v~~ intentional whitespace
# DEFINE: %{ws}=   
# RUN: echo "'%{ws}'"
# CHECK:''
#
#                 v intentional whitespace
# REDEFINE: %{ws}= 
# RUN: echo "'%{ws}'"
# CHECK:''

# White space is not required around the name or value.
#
# DEFINE:%{non-ws}=abc
# RUN: echo "'%{non-ws}'"
# CHECK:'abc'
#
# REDEFINE:%{non-ws}=HelloWorld
# RUN: echo "'%{non-ws}'"
# CHECK:'HelloWorld'

# White space is not required around formal parameters or arguments.
#
# DEFINE:%{non-ws-fn}(P0%,P1%,P2%)=non-ws-fn(%{P0},%{P1},%{P2})
# RUN: echo "'%{non-ws-fn}(a%,b%,c%)'"
# CHECK:'non-ws-fn(a,b,c)'
#
# REDEFINE:%{non-ws-fn}(P0%,P1%,P2%)=non-ws-fn(%{P2},%{P1},%{P0})
# RUN: echo "'%{non-ws-fn}(a%,b%,c%)'"
# CHECK:'non-ws-fn(c,b,a)'

# Exact white space is preserved within the value or an actual arg, but
# whitespace enclosing the name, the value, a formal parameter, or an actual arg
# is discarded.  ('%{' and '}' are part of the name, and whitespace in between
# isn't permitted.)
#
#                                      v~~ intentional whitespace
# DEFINE:   %{ws-non-ws}  =  abc    def   
#                                                                v~ intentional whitespace
# DEFINE:   %{ws-non-ws-fn}(  P0 %, P1  %)  =  <%{P0}>    <%{P1}>  
# RUN: echo "'%{ws-non-ws}'"
# RUN: echo "'%{ws-non-ws-fn}(      abc  def     %,    ghi     jkl         %)'"
# CHECK:'abc    def'
# CHECK:'<abc  def>    <ghi     jkl>'
#                                     v intentional whitespace
# REDEFINE: %{ws-non-ws} = Hello World 
#                                                         v intentional whitespace
# REDEFINE: %{ws-non-ws-fn}( P0 %, P1 %) = <%{P0}> <%{P1}> 
# RUN: echo "'%{ws-non-ws}'"
# RUN: echo "'%{ws-non-ws-fn}( a b c %, d e %)'"
# CHECK:'Hello World'
# CHECK:'<a b c> <d e>'

# '%~' can be used to prevent whitespace trimming in the value or an actual arg.
#
#                                                v~~ intentional whitespace
# DEFINE: %{non-trimmed-ws} = %~  abc    def   %~   
#                                                      v~ intentional whitespace
# DEFINE: %{non-trimmed-ws-fn}( P0 %) = %~   %{P0}   %~  
# RUN: echo "'%{non-trimmed-ws}'"
# RUN: echo "'%{non-trimmed-ws-fn}( %~  arg  %~ %)'"
# CHECK:'  abc    def   '
# CHECK:'     arg     '
#
# REDEFINE: %{non-trimmed-ws} =%~ Hello World %~
# REDEFINE: %{non-trimmed-ws-fn}(P0%) =%~ %{P0} %~
# RUN: echo "'%{non-trimmed-ws}'"
# RUN: echo "'%{non-trimmed-ws-fn}(%~ arg %~%)'"
# CHECK:' Hello World '
# CHECK:'  arg  '

# Line continuations in the value are permitted and collapse whitespace.
#
# DEFINE: %{value-continue} = abc\
# DEFINE:def \
# DEFINE:ghi\
# DEFINE: jkl \
# DEFINE: mno  \
# DEFINE:  pqr 
#             ^ intentional whitespace
# RUN: echo "'%{value-continue}'"
# CHECK:'abc def ghi jkl mno pqr'
#
# REDEFINE: %{value-continue} =  abc  \
# REDEFINE: def
# RUN: echo "'%{value-continue}'"
# CHECK:'abc def'

# '%~' can be used to prevent a '\' from indicating a line continuation so it
# can be the last character in the value.
#
# DEFINE: %{ends-in-backslash} = \%~
# RUN: echo "'%{ends-in-backslash}'"
# CHECK:'\'
#
# REDEFINE: %{ends-in-backslash} = %~ \-\ \
# REDEFINE:                           \_\ \
# REDEFINE:                           \-\ %~
# RUN: echo "'%{ends-in-backslash}'"
# CHECK:' \-\ \_\ \-\ '

# Line continuations in formal parameters and actual arguments are permitted.
#
# DEFINE: %{params-continue}(                                                  \
# DEFINE:                     PARAM0 %, PARAM1 %, PARAM2  %, PARAM3  %,        \
# DEFINE:                     PARAM4 %, PARAM5 %, PARAM6  %, PARAM7  %,        \
# DEFINE:                     PARAM8 %, PARAM9 %, PARAM10 %, PARAM11 %) =      \
# DEFINE:   %{PARAM0} %{PARAM1} %{PARAM2} %{PARAM3}                            \
# DEFINE:   %{PARAM4} %{PARAM5} %{PARAM6} %{PARAM7}                            \
# DEFINE:   %{PARAM8} %{PARAM9} %{PARAM10} %{PARAM11}
# RUN: echo "'%{params-continue}(          \
# RUN:                           a %, b %, \
# RUN:                           c %, d %, \
# RUN:                           e %, f %, \
# RUN:                           g %, h %, \
# RUN:                           i %, j %, \
# RUN:                           k %, l %)'"
# CHECK:'a b c d e f g h i j k l'

# Whitespace at the end of the line after a '\' is ignored, and it's treated as
# a line continuation.  Otherwise, the behavior would be hard to understand
# because it looks like a line continuation.
#
#                                   v~~~~~~~~~~~ intentional whitespace
# DEFINE: %{ws-after-continue}=foo \            
# DEFINE: bar
# RUN: echo "'%{ws-after-continue}'"
# CHECK:'foo bar'
#
#                                     v intentional whitespace
# REDEFINE: %{ws-after-continue}=foo \ 
# REDEFINE: bar
# RUN: echo "'%{ws-after-continue}'"
# CHECK:'foo bar'

# A line continuation is permitted anywhere... that whitespace is permitted
# because it reduces to a single space.
#
# Directives with at least one non-whitespace character (could be '\') are
# permitted even if they contribute nothing to the value.  There might be no
# practical use, but check that it behaves as expected.
#
# DEFINE:\
# DEFINE:%{blank-lines}\
# DEFINE:\
# DEFINE:=\
# DEFINE:\
# DEFINE:a
# RUN: echo "'%{blank-lines}'"
# CHECK:'a'
#
# REDEFINE:                  \
# REDEFINE: %{blank-lines}   \
# REDEFINE:                  \
# REDEFINE:                = \
# REDEFINE:                  \
# REDEFINE:      a           \
# REDEFINE:                  \
# REDEFINE:      b           \
# REDEFINE:                  \
# REDEFINE:      c
# RUN: echo "'%{blank-lines}'"
# CHECK:'a b c'

# The fourth DEFINE line is deceptive because it looks like a new substitution,
# but it's actually a continuation of the previous value.
#
# DEFINE: %{name}=x
# DEFINE: %{value}=3
# DEFINE: %{deceptive-continue}=echo \
# DEFINE: %{name}=%{value}
# RUN: %{deceptive-continue}
# CHECK:x=3

# CHECK:{{ *}}Passed: 1
