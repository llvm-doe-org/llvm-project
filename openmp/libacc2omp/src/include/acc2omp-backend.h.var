/*
 * acc2omp-backend.h -- Interface for OpenMP runtime entry points that are
 * inherently outside the scope of the OpenMP specification but that libacc2omp
 * depends upon.
 *
 * Rationale
 * ---------
 *
 * libacc2omp relies on standard OpenMP runtime entry points as much as
 * possible.  When additional entry points are required, OpenMP extensions are
 * designed if those entry points seem to be within the scope of the OpenMP
 * specification even if it is currently unknown whether they will ever be
 * accepted for inclusion.  However, some entry points that libacc2omp requires
 * seem to be inherently outside the scope of the OpenMP specification even
 * though they may utilize facilities that already exist in most OpenMP
 * runtimes.  Thus, they are likely to be handled differently by different
 * OpenMP runtimes for the foreseeable future.  The functions declared in this
 * header provide a unified "backend" interface for such entry points.
 *
 * For example, both the OpenMP runtime and the application sometimes must
 * report diagnostics at run time.  However, it does not seem reasonable for the
 * application to instruct the OpenMP runtime to report diagnostics as if they
 * originated from the OpenMP runtime itself.  Thus, an entry point to do so
 * will likely never be included in the OpenMP specification.  libacc2omp also
 * needs to be able to report diagnostics at run time.  Like the application,
 * libacc2omp could provide its own mechanisms for this purpose (e.g., print an
 * English diagnostic to stderr).  However, the libacc2omp user experience
 * should prove more seamless and less confusing if libacc2omp behaves like a
 * well integrated component of the OpenMP runtime by reusing the OpenMP
 * runtime's mechanisms for this purpose (e.g., translate a diagnostic to a
 * runtime-determined language, add runtime-specific labeling and debug info,
 * and print it to a runtime-determined log file or stream).  Thus, to report
 * runtime diagnostics, libacc2omp calls functions like \c acc2omp_fatal, which
 * is declared in this header and should be implemented per OpenMP runtime.
 *
 * (The reverse is also true: libacc2omp provides functions that the OpenMP
 * runtime must call in order to fully support OpenACC.  See acc2omp-handlers.h
 * for that interface.)
 *
 * libacc2omp backend
 * ------------------
 *
 * This is the term we use for any implementation of the functions declared in
 * this header in order to enable libacc2omp to use some particular OpenMP
 * runtime.  For the convenience of users who wish to develop new libacc2omp
 * backends, LLVM typically installs this header in the same directories as it
 * installs its versions of the standard OpenACC and OpenMP headers.  Of course,
 * a libacc2omp backend can be compiled and linked as part of the OpenMP runtime
 * library it enables libacc2omp to use (as in the case of LLVM's OpenMP
 * runtime), or it can be compiled and linked as a separate library.
 *
 * TODO: To make it easier to get started with a new OpenMP runtime, we might
 * consider providing a (weakly linked?) default implementation of each backend
 * function.  For example, the default acc2omp_fatal could simply print to
 * stderr and call abort.
 *
 * LLVM's runtime libraries
 * ------------------------
 *
 * The libacc2omp backend for LLVM's OpenMP runtime is built as part of the
 * latter's libraries, libomp.so and libomptarget.so.  LLVM typically installs
 * libacc2omp.so in the same directories as those libraries, which are encoded
 * as shared library dependencies.  Nevertheless, libacc2omp.so is designed for
 * any OpenMP runtime.  To select an alternate OpenMP runtime and libacc2omp
 * backend, LD_LIBRARY_PATH or LD_PRELOAD can be used, or a new libacc2omp.so
 * can be built.
 *
 * Once caveat is that, if the alternate OpenMP runtime's omp_device_t is
 * defined differently than LLVM's (specifically, if they compile as differently
 * sized integer representations), then it might be necessary to build a new
 * libacc2omp.so.  Otherwise, OpenACC Runtime Library device management routines
 * might malfunction.  We have not observed this problem in practice, but, like
 * acc_device_t, omp_device_t is intended to be implementation-specific.
 */

//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef ACC2OMP_BACKEND_H
#define ACC2OMP_BACKEND_H

#include <omp.h>
#include <openacc.h>

/// Message IDs that libacc2omp passes to backends for optional
/// internationalization.
///
/// The \c acc2omp_msg definition in backend-internal.cpp contains printf-style
/// format strings in English showing the expected semantics and arguments.
typedef enum {
  acc2omp_msg_env_acc_device_type_invalid,
  acc2omp_msg_env_acc_device_num_parse_error,
  acc2omp_msg_env_acc_device_num_default_invalid,
  acc2omp_msg_env_acc_device_num_invalid,
  acc2omp_msg_alloc_fail,
  acc2omp_msg_acc_proflib_fail,
  acc2omp_msg_unsupported_event_register,
  acc2omp_msg_unsupported_event_unregister,
  acc2omp_msg_event_unsupported_toggle,
  acc2omp_msg_event_unsupported_multiple_register,
  acc2omp_msg_event_register_result,
  acc2omp_msg_event_unregister_result,
  acc2omp_msg_event_unregister_unregistered,
  acc2omp_msg_callback_unregister_unregistered,
  acc2omp_msg_get_num_devices_invalid_type,
  acc2omp_msg_set_device_type_invalid_type,
  acc2omp_msg_set_device_type_no_devices,
  acc2omp_msg_set_device_num_invalid_type,
  acc2omp_msg_set_device_num_invalid_num,
  acc2omp_msg_get_device_num_invalid_type,
  acc2omp_msg_set_default_async_invalid,
  acc2omp_msg_map_data_host_pointer_null,
  acc2omp_msg_map_data_device_pointer_null,
  acc2omp_msg_map_data_shared_memory,
  acc2omp_msg_map_data_already_present,
  acc2omp_msg_map_data_fail,
  acc2omp_msg_unmap_data_pointer_null,
  acc2omp_msg_unmap_data_shared_memory,
  acc2omp_msg_unmap_data_fail,
  acc2omp_msg_memcpy_to_device_dest_pointer_null,
  acc2omp_msg_memcpy_to_device_src_pointer_null,
  acc2omp_msg_memcpy_to_device_fail,
  acc2omp_msg_memcpy_from_device_dest_pointer_null,
  acc2omp_msg_memcpy_from_device_src_pointer_null,
  acc2omp_msg_memcpy_from_device_fail,
  acc2omp_msg_memcpy_device_dest_pointer_null,
  acc2omp_msg_memcpy_device_src_pointer_null,
  acc2omp_msg_memcpy_device_fail,
  acc2omp_msg_memcpy_d2d_dest_pointer_null,
  acc2omp_msg_memcpy_d2d_src_pointer_null,
  acc2omp_msg_memcpy_d2d_dest_device_invalid,
  acc2omp_msg_memcpy_d2d_src_device_invalid,
  acc2omp_msg_memcpy_d2d_dest_data_inaccessible,
  acc2omp_msg_memcpy_d2d_src_data_inaccessible,
  acc2omp_msg_memcpy_d2d_fail,
  acc2omp_msg_async2dep_invalid,
} acc2omp_msgid_t;

/// A wrapper around an \c acc2omp_msgid_t and its default printf-style format
/// string in English.
///
/// Notes for usage within libacc2omp:
/// - \c ACC2OMP_MSG should always be used to build instances of acc2omp_msg_t.
/// - Using acc2omp_msg_t instead of just acc2omp_msgid_t as a function
///   parameter serves two purposes:
///   - First, it makes access to the default format string more convenient when
///     desired in backend function implementations.
///   - Second, it means that \c acc2omp_msgid_t doesn't have to serve as a
///     second argument to \c va_start, where it would produce undefined
///     behavior, as warned by -Wvarargs.
typedef struct {
  acc2omp_msgid_t Id;
  const char *DefaultFmt;
} acc2omp_msg_t;

#ifdef __cplusplus
extern "C" {
#endif

/// Report a runtime warning and continue execution.
void acc2omp_warn(acc2omp_msg_t Msg, ...);

/// Report a fatal runtime error and abort the program.
void acc2omp_fatal(acc2omp_msg_t Msg, ...);

/// Assert that \p Cond is true in file \p File at line \p Line with message
/// \p Msg.
///
/// The backend's implementation of this function may choose to (1) utilize an
/// assertion mechanism exposed by the OpenMP runtime or (2) implement its own
/// assertion mechanism (maybe just a call to fprintf and abort).  For choice 1,
/// if the OpenMP runtime's assertion mechanism is disabled for this build, the
/// backend may choose to fall back to choice 2 or simply ignore the assertion.
///
/// If libacc2omp is built with assertions disabled, then \c acc2omp_assert is
/// never called.  The backend normally does not need to consider this
/// possibility.  However, if whether assertions are enabled is always the same
/// in libacc2omp and the OpenMP runtime, then the fallback discussed above is
/// never useful.
///
/// Notes for usage within libacc2omp: Do not call this directly.  Use
/// \c ACC2OMP_ASSERT and \c ACC2OMP_UNREACHABLE instead.
void acc2omp_assert(int Cond, const char *Msg, const char *File, int Line);

/// Return the \c omp_device_t that corresponds to \p DevTypeACC.  Return
/// \c omp_device_none if \p DevTypeACC is \c acc_device_none,
/// \c acc_device_default, \c acc_device_not_host, \c acc_device_current, or any
/// \c acc_device_t architecture-specific enumerator for which the OpenMP
/// implementation currently defines no corresponding \c omp_device_t
/// architecture-specific enumerator.  Return \c omp_device_host if
/// \p DevTypeACC is \c acc_device_host.  Otherwise, return an \c omp_device_t
/// architecture-specific enumerator.
///
/// This function belongs in the libacc2omp backend instead of in the OpenMP or
/// OpenACC specification for two reasons: (1) it inherently involves both
/// languages and thus will most likely be viewed as out of scope for either
/// specification, and (2) the architecture-specific members of each of
/// \c acc_device_t or \c omp_device_t are necessarily not standardized but are
/// specific to each OpenACC or OpenMP implementation.
omp_device_t acc2omp_get_omp_device_t(acc_device_t DevTypeACC);

/// Return the \c acc_device_t that corresponds to \p DevTypeOMP.  Return
/// \c acc_device_none if \p DevTypeOMP is \c omp_device_none or any
/// \c omp_device_t architecture-specific enumerator for which libacc2omp
/// currently defines no corresponding \c acc_device_t enumerator.  Return
/// \c acc_device_host if \p DevTypeOMP is \c omp_device_host.  Otherwise,
/// return an \c acc_device_t architecture-specific enumerator.
///
/// Also see comments on \c acc2omp_get_omp_device_t.
acc_device_t acc2omp_get_acc_device_t(omp_device_t DevTypeOMP);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // ACC2OMP_BACKEND_H
