# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.

import os
import re
import subprocess
import lit.formats
from lit.llvm.subst import ToolSubst

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

def append_dynamic_library_path(name, value):
    sep = ':'
    if name in config.environment:
        config.environment[name] = value + sep + config.environment[name]
    else:
        config.environment[name] = value

# name: The name of this test suite.
config.name = 'libacc2omp'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp']
config.excludes = ['Inputs']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root object directory where output is placed
config.test_exec_root = config.libacc2omp_obj_root

# Use lit's internal shell to help guarantee test portability.
config.test_format = lit.formats.ShTest(execute_external=False)

# Allow REQUIRES / UNSUPPORTED / XFAIL to work
config.target_triple = [ ]
for feature in config.test_compiler_features:
    config.available_features.add(feature)

# Set up environment to find libraries at run time
append_dynamic_library_path('LD_LIBRARY_PATH', config.libacc2omp_dir)
append_dynamic_library_path('LD_LIBRARY_PATH', config.libomp_dir)
append_dynamic_library_path('LD_LIBRARY_PATH', config.libomptarget_dir)

# Tool substitutions.
#
# Generally, we need to be aware of dead code in our tests, especially because
# unused static functions might be test cases that are accidentally not invoked.
cflags = " -Werror=unused-function"
# Make sure the build's libraries are used not the system's.
cflags += " -L " + config.libacc2omp_dir
cflags += " -L " + config.libomp_dir
cflags += " -L " + config.libomptarget_dir
cflags += " --libomptarget-amdgcn-bc-path=" + config.libomptarget_dir
cflags += " --libomptarget-nvptx-bc-path=" + config.libomptarget_dir
config.substitutions.append(("%clangXX", config.test_cxx_compiler + cflags))
config.substitutions.append(("%clang", config.test_c_compiler + cflags))
config.substitutions.append(("%not", config.test_not))
config.substitutions.append(("FileCheck", config.test_filecheck +
                                          " --allow-unused-prefixes"))
config.substitutions.append(("%preload-t.so", "env LD_PRELOAD=%t.so"))

# The OpenMP version required by the OpenACC implementation.
config.substitutions.append(('%fopenmp-version', '-fopenmp-version=51'))

def addDevSubstitutions(arch, alias = None):
    ndevs = getattr(config, "clang_acc_test_exe_" + arch)
    triple = getattr(config, "clang_acc_test_exe_" + arch + "_triple")
    subst_archs = [arch]
    if not alias is None:
        subst_archs.append(alias)
    for subst_arch in subst_archs:
        config.substitutions.append(('%' + subst_arch + '-ndevs', ndevs))
        config.substitutions.append(('%' + subst_arch + '-maxdev', ndevs-1))
        config.substitutions.append(('%run-if-' + subst_arch,
                                     ':' if ndevs == 0 else ''))
        config.substitutions.append(('%run-' + subst_arch + '-triple', triple))

config.substitutions.append(('%host-ndevs', 1))
config.substitutions.append(('%host-maxdev', 0))
addDevSubstitutions("x86_64")
addDevSubstitutions("ppc64le")
addDevSubstitutions("nvptx64", "nvidia")
config.substitutions.append(('%x86_64-nvidia-ndevs',
                             config.clang_acc_test_exe_x86_64 +
                             config.clang_acc_test_exe_nvptx64))
config.substitutions.append(('%ppc64le-nvidia-ndevs',
                             config.clang_acc_test_exe_ppc64le +
                             config.clang_acc_test_exe_nvptx64))

config.substitutions.append(('%acc-version', '202011'))

config.substitutions.append(('%acc-includes',
                             '-isystem {acc} -isystem {omp}'.format(
                                 acc=config.acc2omp_header_directory,
                                 omp=config.omp_header_directory)))
config.substitutions.append(('%acc-libs', '-lacc2omp'))
